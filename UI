-- Nythera V3 UI Library
-- A comprehensive, customizable UI library for Roblox with multiple component types,
-- saving functionality, and smooth animations

local Nythera = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Default Configuration
Nythera.Config = {
    WindowName = "Nythera V3",
    Color = Color3.fromRGB(50, 50, 50),
    AccentColor = Color3.fromRGB(70, 130, 240)
}

-- Saving Manager
local SaveManager = {}
SaveManager.Folder = "NytheraV3/Configs"
SaveManager.CurrentConfig = "default"
SaveManager.ConfigurationSaving = {
    Enabled = true,
    AutoSave = true
}
SaveManager.Flags = {}
SaveManager.ConfigList = {}

function SaveManager:SetupFolders()
    if not isfolder(self.Folder) then
        makefolder(self.Folder)
    end
end

function SaveManager:RefreshConfigList()
    self.ConfigList = {}
    local success, files = pcall(listfiles, self.Folder)
    if success then
        for _, file in ipairs(files) do
            local fileName = file:match("[^/\\]+$"):gsub("%.json$", "")
            table.insert(self.ConfigList, fileName)
        end
    end
    return self.ConfigList
end

function SaveManager:RegisterFlag(flag, element)
    self.Flags[flag] = element
end

function SaveManager:SaveConfig(configName)
    if not self.ConfigurationSaving.Enabled or not configName then return end
    local configTable = {}
    for flag, element in pairs(self.Flags) do
        if element.GetValue then
            configTable[flag] = element:GetValue()
        end
    end
    if next(configTable) then
        writefile(self.Folder .. "/" .. configName .. ".json", HttpService:JSONEncode(configTable))
    end
end

function SaveManager:LoadConfig(configName)
    if not self.ConfigurationSaving.Enabled or not configName then return end
    local path = self.Folder .. "/" .. configName .. ".json"
    if isfile(path) then
        local configTable = HttpService:JSONDecode(readfile(path))
        for flag, value in pairs(configTable) do
            if self.Flags[flag] and self.Flags[flag].Set then
                self.Flags[flag]:Set(value)
            end
        end
    end
end

function SaveManager:DeleteConfig(configName)
    local path = self.Folder .. "/" .. configName .. ".json"
    if isfile(path) then
        delfile(path)
    end
end

function SaveManager:AutoSaveLoop()
    if self.ConfigurationSaving.AutoSave then
        self:SaveConfig(self.CurrentConfig)
    end
end

SaveManager:SetupFolders()
SaveManager:RefreshConfigList()

-- Utility Function to Create Instances
local function Create(class, properties, children)
    local obj = Instance.new(class)
    for prop, value in pairs(properties or {}) do
        obj[prop] = value
    end
    for _, child in pairs(children or {}) do
        child.Parent = obj
    end
    return obj
end

-- Create the Main Library Window
function Nythera:CreateWindow(options)
    options = options or {}
    local windowName = options.Title or Nythera.Config.WindowName
    local accentColor = options.AccentColor or Nythera.Config.AccentColor

    if CoreGui:FindFirstChild("NytheraV3") then
        CoreGui:FindFirstChild("NytheraV3"):Destroy()
    end

    local ScreenGui = Create("ScreenGui", {
        Name = "NytheraV3",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    local Main = Create("Frame", {
        Name = "Main",
        Parent = ScreenGui,
        BackgroundColor3 = Color3.fromRGB(25, 25, 30),
        Position = UDim2.new(0.5, -350, 0.5, -225),
        Size = UDim2.new(0, 750, 0, 450),
        ClipsDescendants = true
    }, {
        Create("UICorner", {CornerRadius = UDim.new(0, 6)})
    })

    local TopBar = Create("Frame", {
        Name = "TopBar",
        Parent = Main,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        Size = UDim2.new(1, 0, 0, 30)
    }, {
        Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
        Create("Frame", {Name = "BottomCover", BackgroundColor3 = Color3.fromRGB(30, 30, 35), Position = UDim2.new(0, 0, 1, -6), Size = UDim2.new(1, 0, 0, 6)}),
        Create("ImageLabel", {Name = "Logo", BackgroundTransparency = 1, Position = UDim2.new(0, 8, 0, 8), Size = UDim2.new(0, 16, 0, 16), Image = "rbxassetid://7072706620", ImageColor3 = Color3.fromRGB(255, 255, 255)}),
        Create("TextLabel", {Name = "Title", BackgroundTransparency = 1, Position = UDim2.new(0, 0, 0, 0), Size = UDim2.new(0, 150, 1, 0), Font = Enum.Font.GothamBold, Text = windowName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Center}),
        Create("TextLabel", {Name = "TabNameText", BackgroundTransparency = 1, Position = UDim2.new(0, 160, 0, 0), Size = UDim2.new(0, 100, 1, 0), Font = Enum.Font.GothamBold, Text = "", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left})
    })

    local Sidebar = Create("Frame", {
        Name = "Sidebar",
        Parent = Main,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(0, 150, 1, -30)
    })

    local ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        Parent = Main,
        BackgroundColor3 = Color3.fromRGB(25, 25, 30),
        Position = UDim2.new(0, 150, 0, 30),
        Size = UDim2.new(1, -150, 1, -30),
        ClipsDescendants = true
    })

    local TabButtons = Create("ScrollingFrame", {
        Name = "TabButtons",
        Parent = Sidebar,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, -50),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 0,
        AutomaticCanvasSize = Enum.AutomaticSize.Y
    }, {
        Create("UIListLayout", {HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5)}),
        Create("UIPadding", {PaddingTop = UDim.new(0, 10)})
    })

    local Tabs = {}
    local ActiveTab = nil
    local TabNameText = TopBar.TabNameText

    -- Dragging Logic
    local dragging, dragStart, startPos
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
        end
    end)
    TopBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    -- Resizing Logic
    local ResizeHandle = Create("TextButton", {
        Name = "ResizeHandle",
        Parent = Main,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -20, 1, -20),
        Size = UDim2.new(0, 20, 0, 20),
        Text = ""
    })
    local resizing, mouseOffset = false, Vector2.new(0, 0)
    ResizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = UserInputService:GetMouseLocation()
            local framePos = Main.AbsolutePosition
            local frameSize = Main.AbsoluteSize
            mouseOffset = Vector2.new((framePos.X + frameSize.X) - mousePos.X, (framePos.Y + frameSize.Y) - mousePos.Y)
            resizing = true
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = UserInputService:GetMouseLocation()
            local absPos = Main.AbsolutePosition
            local width = math.max((mousePos.X + mouseOffset.X) - absPos.X, 750)
            local height = math.max((mousePos.Y + mouseOffset.Y) - absPos.Y, 450)
            Main.Size = UDim2.new(0, width, 0, height)
        end
    end)

    -- User Profile
    local UserProfile = Create("Frame", {
        Name = "UserProfile",
        Parent = Sidebar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 1, -50),
        Size = UDim2.new(1, 0, 0, 50)
    }, {
        Create("ImageLabel", {Name = "Avatar", BackgroundTransparency = 1, Position = UDim2.new(0, 15, 0.5, -15), Size = UDim2.new(0, 30, 0, 30), Image = Players:GetUserThumbnailAsync(LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)}, {Create("UICorner", {CornerRadius = UDim.new(0.5, 0)})}),
        Create("TextLabel", {Name = "Username", BackgroundTransparency = 1, Position = UDim2.new(0, 55, 0, 0), Size = UDim2.new(1, -65, 1, 0), Font = Enum.Font.GothamBold, Text = LocalPlayer.Name, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left})
    })

    -- Window Object
    local Window = {}

    function Window:NewTab(name, icon)
        name = name or ""
        icon = icon or "rbxassetid://7072706318"

        local TabButton = Create("TextButton", {
            Name = name .. "Button",
            Parent = TabButtons,
            BackgroundColor3 = Color3.fromRGB(35, 35, 40),
            Size = UDim2.new(0.9, 0, 0, 35),
            Text = "",
            AutoButtonColor = false
        }, {
            Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
            Create("ImageLabel", {Name = "Icon", BackgroundTransparency = 1, Position = UDim2.new(0, 10, 0.5, -10), Size = UDim2.new(0, 20, 0, 20), Image = icon, ImageColor3 = Color3.fromRGB(255, 255, 255)}),
            Create("TextLabel", {Name = "Name", BackgroundTransparency = 1, Position = UDim2.new(0, 40, 0, 0), Size = UDim2.new(1, -40, 1, 0), Font = Enum.Font.Gotham, Text = name, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left})
        })

        local TabPage = Create("ScrollingFrame", {
            Name = name .. "Page",
            Parent = ContentContainer,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Color3.fromRGB(70, 70, 80),
            Visible = false,
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        }, {
            Create("Frame", {Name = "LeftContainer", BackgroundTransparency = 1, Position = UDim2.new(0, 10, 0, 10), Size = UDim2.new(0.5, -15, 0, 0), AutomaticSize = Enum.AutomaticSize.Y}, {Create("UIListLayout", {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 10)})}),
            Create("Frame", {Name = "RightContainer", BackgroundTransparency = 1, Position = UDim2.new(0.5, 5, 0, 10), Size = UDim2.new(0.5, -15, 0, 0), AutomaticSize = Enum.AutomaticSize.Y}, {Create("UIListLayout", {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 10)})}),
        })

        TabButton.MouseButton1Click:Connect(function()
            if ActiveTab then ActiveTab.Visible = false end
            TabPage.Visible = true
            ActiveTab = TabPage
            TabNameText.Text = name
            for _, tab in pairs(Tabs) do
                TweenService:Create(tab.Button, TweenInfo.new(0.2), {BackgroundColor3 = (tab.Button == TabButton) and Color3.fromRGB(50, 50, 60) or Color3.fromRGB(35, 35, 40)}):Play()
            end
        end)

        TabButton.MouseEnter:Connect(function()
            if ActiveTab ~= TabPage then
                TweenService:Create(TabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 50)}):Play()
            end
        end)

        TabButton.MouseLeave:Connect(function()
            if ActiveTab ~= TabPage then
                TweenService:Create(TabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}):Play()
            end
        end)

        local Tab = {Button = TabButton, Page = TabPage, Left = TabPage.LeftContainer, Right = TabPage.RightContainer}
        table.insert(Tabs, Tab)

        if not ActiveTab then
            TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
            TabPage.Visible = true
            ActiveTab = TabPage
            TabNameText.Text = name
        end

        local TabObject = {}

        function TabObject:NewSection(name, side)
            side = (side or "left"):lower()
            local Container = (side == "left") and Tab.Left or Tab.Right

            local SectionFrame = Create("Frame", {
                Name = name .. "Section",
                Parent = Container,
                BackgroundColor3 = Color3.fromRGB(30, 30, 35),
                Size = UDim2.new(1, 0, 0, 35),
                AutomaticSize = Enum.AutomaticSize.Y
            }, {
                Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                Create("TextLabel", {Name = "Title", BackgroundTransparency = 1, Position = UDim2.new(0, 10, 0, 0), Size = UDim2.new(1, -10, 0, 35), Font = Enum.Font.GothamBold, Text = name or "", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left}, {
                    Create("ImageLabel", {Name = "DropArrow", BackgroundTransparency = 1, Position = UDim2.new(1, -20, 0.5, -5), Size = UDim2.new(0, 10, 0, 10), Image = "rbxassetid://6031094670", ImageColor3 = Color3.fromRGB(255, 255, 255), Rotation = 180})
                }),
                Create("Frame", {Name = "Content", BackgroundTransparency = 1, Position = UDim2.new(0, 0, 0, 35), Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y}, {
                    Create("UIPadding", {PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10)}),
                    Create("UIListLayout", {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 8)})
                })
            })

            local expanded = true
            local DropArrow = SectionFrame.Title.DropArrow
            local Content = SectionFrame.Content
            SectionFrame.Title.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    expanded = not expanded
                    Content.Visible = expanded
                    TweenService:Create(DropArrow, TweenInfo.new(0.2), {Rotation = expanded and 180 or 0}):Play()
                end
            end)

            local Section = {}

            -- NewDropdown
            function Section:NewDropdown(options)
                options = options or {}
                local dropName = options.Name or "Dropdown"
                local callback = options.Callback or function() end
                local items = options.Items or {}
                local multiSelect = options.MultiSelect or false
                local maxSelections = options.MaxSelections or #items
                local defaultSelections = options.DefaultSelections or {}
                local flag = options.Flag or dropName:gsub("[^%w]", "_"):lower()

                local selectedItems = {}
                if multiSelect then
                    for _, v in ipairs(defaultSelections) do selectedItems[v] = true end
                else
                    if #defaultSelections > 0 then selectedItems[defaultSelections[1]] = true end
                end

                local DropdownFrame = Create("Frame", {
                    Parent = Content,
                    BackgroundColor3 = Color3.fromRGB(35, 35, 40),
                    Size = UDim2.new(1, 0, 0, 35),
                    ClipsDescendants = false,
                    ZIndex = 2
                }, {
                    Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                    Create("Frame", {Name = "Header", BackgroundColor3 = Color3.fromRGB(35, 35, 40), Size = UDim2.new(1, 0, 0, 35), ZIndex = 3}, {
                        Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                        Create("Frame", {Name = "BottomCover", BackgroundColor3 = Color3.fromRGB(35, 35, 40), Position = UDim2.new(0, 0, 1, -6), Size = UDim2.new(1, 0, 0, 6), Visible = false, ZIndex = 3}),
                        Create("TextButton", {Name = "HeaderButton", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 1, 0), Text = "", ZIndex = 5}),
                        Create("TextLabel", {Name = "Title", BackgroundTransparency = 1, Position = UDim2.new(0, 10, 0, 0), Size = UDim2.new(1, -40, 1, 0), Font = Enum.Font.Gotham, Text = dropName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, ZIndex = 4}),
                        Create("ImageLabel", {Name = "Arrow", BackgroundTransparency = 1, Position = UDim2.new(1, -20, 0.5, -5), Size = UDim2.new(0, 10, 0, 10), Image = "rbxassetid://6031094670", ImageColor3 = Color3.fromRGB(255, 255, 255), ZIndex = 4})
                    }),
                    Create("Frame", {Name = "DropContent", BackgroundColor3 = Color3.fromRGB(40, 40, 45), Position = UDim2.new(0, 0, 0, 35), Size = UDim2.new(1, 0, 0, 0), ClipsDescendants = true, ZIndex = 3}, {
                        Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                        Create("ScrollingFrame", {Name = "ItemsFrame", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 1, 0), CanvasSize = UDim2.new(0, 0, 0, 0), ScrollBarThickness = 2, ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255), ScrollBarImageTransparency = 0.8, AutomaticCanvasSize = Enum.AutomaticSize.Y, ZIndex = 4}, {
                            Create("UIListLayout", {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 4)}),
                            Create("UIPadding", {PaddingTop = UDim.new(0, 5), PaddingBottom = UDim.new(0, 5), PaddingLeft = UDim.new(0, 5), PaddingRight = UDim.new(0, 5)})
                        })
                    })
                })

                local Header = DropdownFrame.Header
                local HeaderButton = Header.HeaderButton
                local DropdownTitle = Header.Title
                local ArrowIcon = Header.Arrow
                local BottomCover = Header.BottomCover
                local DropContent = DropdownFrame.DropContent
                local ItemsFrame = DropContent.ItemsFrame

                local dropped = false
                local connections = {}

                local function UpdateParentLayout()
                    DropdownFrame.Size = UDim2.new(1, 0, 0, 35 + DropContent.Size.Y.Offset)
                    local section = DropdownFrame.Parent
                    section:FindFirstChildOfClass("UIListLayout"):ApplyLayout()
                    local container = section.Parent
                    container:FindFirstChildOfClass("UIListLayout"):ApplyLayout()
                    local tabPage = container.Parent
                    local leftHeight = tabPage.LeftContainer.AbsoluteSize.Y
                    local rightHeight = tabPage.RightContainer.AbsoluteSize.Y
                    tabPage.CanvasSize = UDim2.new(0, 0, 0, math.max(leftHeight, rightHeight) + 20)
                    RunService.Heartbeat:Wait()
                end

                local function CalculateContentHeight()
                    local itemHeight = 25
                    local padding = 4
                    local totalPadding = 10
                    local visibleItems = math.min(#items, 6)
                    if visibleItems == 0 then return 0 end
                    return (visibleItems * itemHeight) + ((visibleItems - 1) * padding) + totalPadding
                end

                local function UpdateDisplayText()
                    local selectedNames = {}
                    for item in pairs(selectedItems) do table.insert(selectedNames, item) end
                    if #selectedNames == 0 then
                        DropdownTitle.Text = dropName
                    elseif not multiSelect then
                        DropdownTitle.Text = dropName .. ": " .. selectedNames[1]
                    elseif #selectedNames == 1 then
                        DropdownTitle.Text = dropName .. ": " .. selectedNames[1]
                    else
                        DropdownTitle.Text = dropName .. " (" .. #selectedNames .. " selected)"
                    end
                    if multiSelect then callback(selectedNames) else callback(selectedNames[1] or nil) end
                end

                local function ToggleDropdown()
                    dropped = not dropped
                    if dropped then
                        BottomCover.Visible = true
                        local contentHeight = CalculateContentHeight()
                        DropContent.Size = UDim2.new(1, 0, 0, contentHeight)
                        TweenService:Create(ArrowIcon, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 180}):Play()
                        UpdateParentLayout()
                        connections.outsideClick = UserInputService.InputBegan:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                local mousePos = UserInputService:GetMouseLocation()
                                local dropdownPos = DropdownFrame.AbsolutePosition
                                local dropdownSize = DropdownFrame.AbsoluteSize + Vector2.new(0, DropContent.AbsoluteSize.Y)
                                if mousePos.X < dropdownPos.X or mousePos.Y < dropdownPos.Y or mousePos.X > dropdownPos.X + dropdownSize.X or mousePos.Y > dropdownPos.Y + dropdownSize.Y then
                                    ToggleDropdown()
                                end
                            end
                        end)
                    else
                        TweenService:Create(ArrowIcon, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 0}):Play()
                        DropContent.Size = UDim2.new(1, 0, 0, 0)
                        BottomCover.Visible = false
                        UpdateParentLayout()
                        if connections.outsideClick then connections.outsideClick:Disconnect() end
                    end
                end

                HeaderButton.MouseButton1Click:Connect(ToggleDropdown)

                local function CreateDropdownItems()
                    ItemsFrame:ClearAllChildren()
                    ItemsFrame.UIListLayout = Create("UIListLayout", {Parent = ItemsFrame, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 4)})
                    ItemsFrame.UIPadding = Create("UIPadding", {Parent = ItemsFrame, PaddingTop = UDim.new(0, 5), PaddingBottom = UDim.new(0, 5), PaddingLeft = UDim.new(0, 5), PaddingRight = UDim.new(0, 5)})
                    for i, item in ipairs(items) do
                        local ItemButton = Create("TextButton", {
                            Name = item .. "Item",
                            Parent = ItemsFrame,
                            BackgroundColor3 = Color3.fromRGB(45, 45, 50),
                            BackgroundTransparency = 0.9,
                            Size = UDim2.new(1, -4, 0, 25),
                            Font = Enum.Font.Gotham,
                            Text = "",
                            ZIndex = 5,
                            LayoutOrder = i
                        }, {
                            Create("UICorner", {CornerRadius = UDim.new(0, 4)}),
                            Create("TextLabel", {Name = "ItemText", BackgroundTransparency = 1, Position = UDim2.new(0, 5, 0, 0), Size = UDim2.new(1, multiSelect and -30 or -10, 1, 0), Font = Enum.Font.Gotham, Text = item, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, ZIndex = 5})
                        })

                        if multiSelect then
                            local SelectionBox = Create("Frame", {
                                Name = "SelectionBox",
                                Parent = ItemButton,
                                BackgroundColor3 = selectedItems[item] and accentColor or Color3.fromRGB(50, 50, 55),
                                Position = UDim2.new(1, -25, 0.5, -7),
                                Size = UDim2.new(0, 14, 0, 14),
                                ZIndex = 6
                            }, {
                                Create("UICorner", {CornerRadius = UDim.new(0, 3)}),
                                Create("ImageLabel", {Name = "Check", BackgroundTransparency = 1, Position = UDim2.new(0, 2, 0, 2), Size = UDim2.new(1, -4, 1, -4), Image = "rbxassetid://7072706318", ImageColor3 = Color3.fromRGB(255, 255, 255), ImageTransparency = selectedItems[item] and 0 or 1, ZIndex = 6})
                            })

                            ItemButton.MouseButton1Click:Connect(function()
                                local currentCount = #selectedItems
                                if selectedItems[item] then
                                    selectedItems[item] = nil
                                    TweenService:Create(SelectionBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                                    TweenService:Create(SelectionBox.Check, TweenInfo.new(0.2), {ImageTransparency = 1}):Play()
                                else
                                    if currentCount < maxSelections then
                                        selectedItems[item] = true
                                        TweenService:Create(SelectionBox, TweenInfo.new(0.2), {BackgroundColor3 = accentColor}):Play()
                                        TweenService:Create(SelectionBox.Check, TweenInfo.new(0.2), {ImageTransparency = 0}):Play()
                                    end
                                end
                                UpdateDisplayText()
                            end)
                        else
                            if selectedItems[item] then
                                ItemButton.BackgroundTransparency = 0.7
                                ItemButton.BackgroundColor3 = accentColor
                            end
                            ItemButton.MouseButton1Click:Connect(function()
                                for _, child in pairs(ItemsFrame:GetChildren()) do
                                    if child:IsA("TextButton") then
                                        TweenService:Create(child, TweenInfo.new(0.2), {BackgroundTransparency = 0.9, BackgroundColor3 = Color3.fromRGB(45, 45, 50)}):Play()
                                    end
                                end
                                TweenService:Create(ItemButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.7, BackgroundColor3 = accentColor}):Play()
                                selectedItems = {}
                                selectedItems[item] = true
                                UpdateDisplayText()
                                delay(0.1, ToggleDropdown)
                            end)
                        end

                        ItemButton.MouseEnter:Connect(function()
                            if not (not multiSelect and selectedItems[item]) then
                                TweenService:Create(ItemButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.5}):Play()
                            end
                        end)

                        ItemButton.MouseLeave:Connect(function()
                            if not (not multiSelect and selectedItems[item]) then
                                TweenService:Create(ItemButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.9}):Play()
                            end
                        end)
                    end
                end

                CreateDropdownItems()
                UpdateDisplayText()

                local Dropdown = {}

                function Dropdown:Refresh(newItems)
                    items = newItems or items
                    if dropped then ToggleDropdown() end
                    CreateDropdownItems()
                    local validSelections = {}
                    for item in pairs(selectedItems) do
                        if table.find(items, item) then validSelections[item] = true end
                    end
                    selectedItems = validSelections
                    UpdateDisplayText()
                    return self
                end

                function Dropdown:Select(itemsToSelect, clear)
                    if clear then selectedItems = {} end
                    if type(itemsToSelect) == "string" then itemsToSelect = {itemsToSelect} end
                    for _, item in ipairs(itemsToSelect) do
                        if table.find(items, item) then
                            if multiSelect then
                                if #selectedItems < maxSelections then selectedItems[item] = true end
                            else
                                selectedItems = {}
                                selectedItems[item] = true
                                break
                            end
                        end
                    end
                    CreateDropdownItems()
                    UpdateDisplayText()
                    return self
                end

                function Dropdown:GetValue()
                    local selectedNames = {}
                    for item in pairs(selectedItems) do table.insert(selectedNames, item) end
                    if multiSelect then return selectedNames else return selectedNames[1] or nil end
                end

                function Dropdown:Set(value)
                    self:Select(value, true)
                    return self
                end

                SaveManager:RegisterFlag(flag, Dropdown)
                return Dropdown
            end

            -- NewToggle
            function Section:NewToggle(options)
                options = options or {}
                local toggleName = options.Name or "Toggle"
                local default = options.Default or false
                local callback = options.Callback or function() end
                local flag = options.Flag or toggleName:gsub("[^%w]", "_"):lower()

                local ToggleFrame = Create("Frame", {
                    Parent = Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30)
                }, {
                    Create("TextLabel", {Name = "Title", BackgroundTransparency = 1, Size = UDim2.new(1, -50, 1, 0), Font = Enum.Font.Gotham, Text = toggleName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left}),
                    Create("Frame", {Name = "Button", BackgroundColor3 = Color3.fromRGB(40, 40, 45), Position = UDim2.new(1, -40, 0.5, -10), Size = UDim2.new(0, 40, 0, 20)}, {
                        Create("UICorner", {CornerRadius = UDim.new(1, 0)}),
                        Create("Frame", {Name = "Circle", BackgroundColor3 = Color3.fromRGB(255, 255, 255), Position = UDim2.new(0, 2, 0.5, -8), Size = UDim2.new(0, 16, 0, 16)}, {Create("UICorner", {CornerRadius = UDim.new(1, 0)})}),
                    })
                })

                local toggled = default
                local Button = ToggleFrame.Button
                local Circle = Button.Circle
                if toggled then
                    Button.BackgroundColor3 = accentColor
                    Circle.Position = UDim2.new(1, -18, 0.5, -8)
                    callback(true)
                end

                local function Set(state)
                    toggled = state
                    TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = toggled and accentColor or Color3.fromRGB(40, 40, 45)}):Play()
                    TweenService:Create(Circle, TweenInfo.new(0.2), {Position = UDim2.new(toggled and 1 or 0, toggled and -18 or 2, 0.5, -8)}):Play()
                    callback(toggled)
                end

                Button.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then Set(not toggled) end
                end)
                ToggleFrame.Title.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then Set(not toggled) end
                end)

                local Toggle = {GetValue = function() return toggled end, Set = Set}
                SaveManager:RegisterFlag(flag, Toggle)
                return Toggle
            end

            -- NewRectButton
            function Section:NewRectButton(options)
                options = options or {}
                local buttonName = options.Name or "Button"
                local default = options.Default or false
                local callback = options.Callback or function() end
                local width = options.Width or 100
                local height = options.Height or 30
                local flag = options.Flag or buttonName:gsub("[^%w]", "_"):lower()

                local ButtonFrame = Create("Frame", {
                    Parent = Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, height)
                }, {
                    Create("TextButton", {Name = "Button", BackgroundColor3 = Color3.fromRGB(40, 40, 45), Size = UDim2.new(0, width, 0, height), Font = Enum.Font.Gotham, Text = buttonName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, AutoButtonColor = false}, {
                        Create("UICorner", {CornerRadius = UDim.new(0, 6)})
                    })
                })

                local Button = ButtonFrame.Button
                local active = default
                if active then
                    Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Button.TextColor3 = Color3.fromRGB(30, 30, 35)
                    callback(true)
                end

                local function Set(state)
                    active = state
                    TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = active and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(40, 40, 45), TextColor3 = active and Color3.fromRGB(30, 30, 35) or Color3.fromRGB(255, 255, 255)}):Play()
                    callback(active)
                end

                Button.MouseButton1Click:Connect(function()
                    Set(not active)
                end)

                Button.MouseEnter:Connect(function()
                    if not active then
                        TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                    end
                end)

                Button.MouseLeave:Connect(function()
                    if not active then
                        TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                    end
                end)

                local RectButton = {GetValue = function() return active end, Set = Set}
                SaveManager:RegisterFlag(flag, RectButton)
                return RectButton
            end

            -- NewButton
            function Section:NewButton(options)
                options = options or {}
                local buttonName = options.Name or "Button"
                local callback = options.Callback or function() end
                local width = options.Width or 1

                local ButtonFrame = Create("Frame", {
                    Parent = Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30)
                }, {
                    Create("TextButton", {Name = "Button", BackgroundColor3 = Color3.fromRGB(40, 40, 45), Size = (width == 1) and UDim2.new(1, 0, 0, 30) or UDim2.new(0, width, 0, 30), Font = Enum.Font.Gotham, Text = buttonName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, AutoButtonColor = false}, {
                        Create("UICorner", {CornerRadius = UDim.new(0, 6)})
                    })
                })

                local Button = ButtonFrame.Button

                Button.MouseButton1Click:Connect(function()
                    TweenService:Create(Button, TweenInfo.new(0.1), {BackgroundColor3 = accentColor}):Play()
                    wait(0.1)
                    TweenService:Create(Button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                    callback()
                end)

                Button.MouseEnter:Connect(function()
                    TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                end)

                Button.MouseLeave:Connect(function()
                    TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                end)
            end

            -- NewSlider
            function Section:NewSlider(options)
                options = options or {}
                local sliderName = options.Name or "Slider"
                local min = options.Min or 0
                local max = options.Max or 100
                local default = options.Default or min
                local suffix = options.Suffix or ""
                local callback = options.Callback or function() end
                local flag = options.Flag or sliderName:gsub("[^%w]", "_"):lower()

                local SliderFrame = Create("Frame", {
                    Parent = Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                }, {
                    Create("TextLabel", {Name = "Title", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 20), Font = Enum.Font.Gotham, Text = sliderName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left}),
                    Create("TextLabel", {Name = "Value", BackgroundTransparency = 1, Position = UDim2.new(1, -40, 0, 0), Size = UDim2.new(0, 40, 0, 20), Font = Enum.Font.Gotham, Text = tostring(default)..suffix, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Right}),
                    Create("Frame", {Name = "SliderBack", BackgroundColor3 = Color3.fromRGB(40, 40, 45), Position = UDim2.new(0, 0, 0, 25), Size = UDim2.new(1, 0, 0, 10)}, {
                        Create("UICorner", {CornerRadius = UDim.new(1, 0)}),
                        Create("Frame", {Name = "SliderFill", BackgroundColor3 = accentColor, Size = UDim2.new((default - min) / (max - min), 0, 1, 0)}, {Create("UICorner", {CornerRadius = UDim.new(1, 0)})}),
                        Create("TextButton", {Name = "SliderButton", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 1, 0), Text = ""})
                    })
                })

                local ValueDisplay = SliderFrame.Value
                local SliderBack = SliderFrame.SliderBack
                local SliderFill = SliderBack.SliderFill
                local SliderButton = SliderBack.SliderButton
                local value = default
                local sliding = false

                local function Update(newValue, skipCallback)
                    value = math.clamp(newValue, min, max)
                    local percent = (value - min) / (max - min)
                    TweenService:Create(SliderFill, TweenInfo.new(0.1), {Size = UDim2.new(percent, 0, 1, 0)}):Play()
                    ValueDisplay.Text = tostring(math.floor(value * 100) / 100)..suffix
                    if not skipCallback then callback(value) end
                end

                SliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        sliding = true
                        local relX = math.clamp((input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
                        Update(min + (relX * (max - min)))
                    end
                end)

                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then sliding = false end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if sliding and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local relX = math.clamp((input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
                        Update(min + (relX * (max - min)))
                    end
                end)

                Update(default, true)

                local Slider = {GetValue = function() return value end, Set = function(newValue) Update(newValue) end}
                SaveManager:RegisterFlag(flag, Slider)
                return Slider
            end

            -- NewInputLetterAdd
            function Section:NewInputLetterAdd(options)
                options = options or {}
                local inputName = options.Name or "Input"
                local default = options.Default or ""
                local placeholderText = options.PlaceholderText or "Type here..."
                local maxLength = options.MaxLength or 100
                local callback = options.Callback or function() end
                local flag = options.Flag or inputName:gsub("[^%w]", "_"):lower()

                local InputFrame = Create("Frame", {
                    Parent = Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                }, {
                    Create("TextLabel", {Name = "Title", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 20), Font = Enum.Font.Gotham, Text = inputName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left}),
                    Create("Frame", {Name = "InputBox", BackgroundColor3 = Color3.fromRGB(40, 40, 45), Position = UDim2.new(0, 0, 0, 25), Size = UDim2.new(1, 0, 0, 30)}, {
                        Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                        Create("TextBox", {Name = "TextBox", BackgroundTransparency = 1, Position = UDim2.new(0, 10, 0, 0), Size = UDim2.new(1, -20, 1, 0), Font = Enum.Font.Gotham, Text = default, PlaceholderText = placeholderText, PlaceholderColor3 = Color3.fromRGB(180, 180, 180), TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, ClearTextOnFocus = false, ClipsDescendants = true})
                    })
                })

                local InputBox = InputFrame.InputBox
                local TextBox = InputBox.TextBox

                TextBox.FocusLost:Connect(function()
                    if maxLength and #TextBox.Text > maxLength then TextBox.Text = TextBox.Text:sub(1, maxLength) end
                    callback(TextBox.Text)
                end)

                TextBox:GetPropertyChangedSignal("Text"):Connect(function()
                    if maxLength and #TextBox.Text > maxLength then TextBox.Text = TextBox.Text:sub(1, maxLength) end
                end)

                InputBox.MouseEnter:Connect(function()
                    TweenService:Create(InputBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                end)

                InputBox.MouseLeave:Connect(function()
                    TweenService:Create(InputBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                end)

                TextBox.Focused:Connect(function()
                    TweenService:Create(InputBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 65)}):Play()
                end)

                TextBox.FocusLost:Connect(function()
                    TweenService:Create(InputBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                end)

                local Input = {GetValue = function() return TextBox.Text end, Set = function(text) TextBox.Text = text callback(text) end}
                SaveManager:RegisterFlag(flag, Input)
                return Input
            end

            -- NewInput (with fixed text, number, toggle)
            function Section:NewInput(options)
                options = options or {}
                local inputName = options.Name or "Input"
                local default = options.Default or ""
                local callback = options.Callback or function() end
                local numberValue = options.DefaultNumber or 0
                local minValue = options.MinValue or 0
                local maxValue = options.MaxValue or 100
                local flag = options.Flag or inputName:gsub("[^%w]", "_"):lower()

                local InputFrame = Create("Frame", {
                    Parent = Content,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                }, {
                    Create("TextLabel", {Name = "Title", BackgroundTransparency = 1, Size = UDim2.new(0.5, 0, 0, 20), Font = Enum.Font.Gotham, Text = inputName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left}),
                    Create("Frame", {Name = "InputBox", BackgroundColor3 = Color3.fromRGB(40, 40, 45), Position = UDim2.new(0, 0, 0, 25), Size = UDim2.new(1, 0, 0, 30)}, {
                        Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                        Create("TextLabel", {Name = "FixedText", BackgroundTransparency = 1, Position = UDim2.new(0, 10, 0, 0), Size = UDim2.new(1, -140, 1, 0), Font = Enum.Font.Gotham, Text = default, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left}),
                        Create("Frame", {Name = "NumberInput", BackgroundColor3 = Color3.fromRGB(50, 50, 55), Position = UDim2.new(1, -120, 0.5, -12), Size = UDim2.new(0, 80, 0, 24), ZIndex = 2}, {
                            Create("UICorner", {CornerRadius = UDim.new(0, 4)}),
                            Create("TextBox", {Name = "NumberBox", BackgroundTransparency = 1, Position = UDim2.new(0, 5, 0, 0), Size = UDim2.new(1, -10, 1, 0), Font = Enum.Font.Gotham, Text = tostring(numberValue), TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Center, ClearTextOnFocus = false, ZIndex = 3})
                        }),
                        Create("Frame", {Name = "ToggleIndicator", BackgroundColor3 = Color3.fromRGB(50, 50, 55), Position = UDim2.new(1, -30, 0.5, -10), Size = UDim2.new(0, 20, 0, 20)}, {
                            Create("UICorner", {CornerRadius = UDim.new(1, 0)})
                        })
                    })
                })

                local FixedText = InputFrame.InputBox.FixedText
                local NumberBox = InputFrame.InputBox.NumberInput.NumberBox
                local ToggleIndicator = InputFrame.InputBox.ToggleIndicator
                local active = false

                ToggleIndicator.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        active = not active
                        TweenService:Create(ToggleIndicator, TweenInfo.new(0.2), {BackgroundColor3 = active and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(50, 50, 55)}):Play()
                        callback(FixedText.Text, tonumber(NumberBox.Text) or numberValue, active)
                    end
                end)

                NumberBox.FocusLost:Connect(function()
                    local inputValue = tonumber(NumberBox.Text) or numberValue
                    inputValue = math.clamp(inputValue, minValue, maxValue)
                    NumberBox.Text = tostring(inputValue)
                    callback(FixedText.Text, inputValue, active)
                end)

                local Input = {}
                function Input:SetFixedText(text)
                    FixedText.Text = text
                    callback(text, tonumber(NumberBox.Text) or numberValue, active)
                end
                function Input:SetNumber(number)
                    local value = math.clamp(number, minValue, maxValue)
                    NumberBox.Text = tostring(value)
                    callback(FixedText.Text, value, active)
                end
                function Input:GetValue()
                    return {text = FixedText.Text, number = tonumber(NumberBox.Text) or numberValue, active = active}
                end
                function Input:Set(value)
                    if type(value) == "table" then
                        if value.text then self:SetFixedText(value.text) end
                        if value.number then self:SetNumber(value.number) end
                        if value.active ~= nil then
                            active = value.active
                            ToggleIndicator.BackgroundColor3 = active and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(50, 50, 55)
                            callback(FixedText.Text, tonumber(NumberBox.Text) or numberValue, active)
                        end
                    else
                        self:SetFixedText(tostring(value))
                    end
                    return self
                end

                SaveManager:RegisterFlag(flag, Input)
                return Input
            end

            -- NewStatusDisplay
            function Section:NewStatusDisplay(options)
                options = options or {}
                local title = options.Title or "Current Status:"
                local refreshCallback = options.RefreshCallback or function() end

                local StatusFrame = Create("Frame", {
                    Parent = Content,
                    BackgroundColor3 = Color3.fromRGB(25, 25, 30),
                    Size = UDim2.new(1, 0, 0, 150),
                    AutomaticSize = Enum.AutomaticSize.Y
                }, {
                    Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                    Create("Frame", {Name = "TopBar", BackgroundColor3 = Color3.fromRGB(30, 30, 35), Size = UDim2.new(1, 0, 0, 35)}, {
                        Create("UICorner", {CornerRadius = UDim.new(0, 6)}),
                        Create("Frame", {Name = "BottomCover", BackgroundColor3 = Color3.fromRGB(30, 30, 35), Position = UDim2.new(0, 0, 1, -6), Size = UDim2.new(1, 0, 0, 6)}),
                        Create("TextLabel", {Name = "StatusTitle", BackgroundTransparency = 1, Position = UDim2.new(0, 10, 0, 0), Size = UDim2.new(1, -100, 1, 0), Font = Enum.Font.GothamBold, Text = title, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left}),
                        Create("TextButton", {Name = "RefreshButton", BackgroundColor3 = accentColor, Position = UDim2.new(1, -80, 0.5, -12), Size = UDim2.new(0, 70, 0, 24), Font = Enum.Font.GothamBold, Text = "Refresh", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 12, AutoButtonColor = false}, {
                            Create("UICorner", {CornerRadius = UDim.new(0, 4)})
                        })
                    }),
                    Create("Frame", {Name = "StatusContent", BackgroundTransparency = 1, Position = UDim2.new(0, 0, 0, 35), Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y}, {
                        Create("UIPadding", {PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), PaddingTop = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10)}),
                        Create("UIListLayout", {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 10)}),
                        Create("TextLabel", {Name = "StatusLabel", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 20), Font = Enum.Font.Gotham, Text = "No data available.", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, LayoutOrder = 1}),
                        Create("TextLabel", {Name = "ItemsTitle", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 20), Font = Enum.Font.GothamBold, Text = "Items:", TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left, LayoutOrder = 2}),
                        Create("Frame", {Name = "ItemsContainer", BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, LayoutOrder = 3}, {
                            Create("UIListLayout", {SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5)})
                        })
                    })
                })

                local RefreshButton = StatusFrame.TopBar.RefreshButton
                local StatusLabel = StatusFrame.StatusContent.StatusLabel
                local ItemsTitle = StatusFrame.StatusContent.ItemsTitle
                local ItemsContainer = StatusFrame.StatusContent.ItemsContainer

                RefreshButton.MouseButton1Click:Connect(function()
                    TweenService:Create(RefreshButton, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(50, 100, 200)}):Play()
                    wait(0.1)
                    TweenService:Create(RefreshButton, TweenInfo.new(0.1), {BackgroundColor3 = accentColor}):Play()
                    refreshCallback()
                end)

                RefreshButton.MouseEnter:Connect(function()
                    TweenService:Create(RefreshButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(90, 150, 255)}):Play()
                end)

                RefreshButton.MouseLeave:Connect(function()
                    TweenService:Create(RefreshButton, TweenInfo.new(0.2), {BackgroundColor3 = accentColor}):Play()
                end)

                local StatusDisplay = {}

                function StatusDisplay:SetStatus(text)
                    StatusLabel.Text = text
                end

                function StatusDisplay:SetItemsTitle(text)
                    ItemsTitle.Text = text
                end

                function StatusDisplay:ClearItems()
                    for _, child in pairs(ItemsContainer:GetChildren()) do
                        if child:IsA("Frame") then child:Destroy() end
                    end
                end

                function StatusDisplay:AddItem(itemName, quantity)
                    local ItemFrame = Create("Frame", {
                        Parent = ItemsContainer,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 0, 25)
                    }, {
                        Create("ImageLabel", {Name = "Icon", BackgroundTransparency = 1, Position = UDim2.new(0, 0, 0.5, -10), Size = UDim2.new(0, 20, 0, 20), Image = "rbxassetid://7072718362"}),
                        Create("TextLabel", {Name = "Name", BackgroundTransparency = 1, Position = UDim2.new(0, 30, 0, 0), Size = UDim2.new(1, -80, 1, 0), Font = Enum.Font.Gotham, Text = itemName, TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left}),
                        Create("TextLabel", {Name = "Quantity", BackgroundTransparency = 1, Position = UDim2.new(1, -50, 0, 0), Size = UDim2.new(0, 50, 1, 0), Font = Enum.Font.GothamBold, Text = "x" .. tostring(quantity), TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, TextXAlignment = Enum.TextXAlignment.Right})
                    })
                    return ItemFrame
                end

                return StatusDisplay
            end

            return Section
        end

        return TabObject
    end

    -- Build Config Section
    function Window:BuildConfigSection(tabName)
        local ConfigTab = self:NewTab(tabName or "Config")
        local ConfigSection = ConfigTab:NewSection("Configuration", "left")

        local ConfigNameInput = ConfigSection:NewInputLetterAdd({
            Name = "Config Name",
            Default = SaveManager.CurrentConfig,
            Callback = function(text)
                SaveManager.CurrentConfig = text
            end
        })

        ConfigSection:NewButton({
            Name = "Save Config",
            Callback = function()
                SaveManager:SaveConfig(SaveManager.CurrentConfig)
            end
        })

        local configDropdown = ConfigSection:NewDropdown({
            Name = "Saved Configs",
            Items = SaveManager:RefreshConfigList(),
            MultiSelect = false,
            Callback = function(selected)
                if selected then
                    ConfigNameInput:Set(selected)
                    SaveManager.CurrentConfig = selected
                end
            end
        })

        ConfigSection:NewButton({
            Name = "Load Config",
            Callback = function()
                SaveManager:LoadConfig(SaveManager.CurrentConfig)
            end
        })

        ConfigSection:NewButton({
            Name = "Delete Config",
            Callback = function()
                SaveManager:DeleteConfig(SaveManager.CurrentConfig)
                configDropdown:Refresh(SaveManager:RefreshConfigList())
            end
        })

        ConfigSection:NewButton({
            Name = "Refresh Configs",
            Callback = function()
                configDropdown:Refresh(SaveManager:RefreshConfigList())
            end
        })

        ConfigSection:NewToggle({
            Name = "Auto-Save Config",
            Default = SaveManager.ConfigurationSaving.AutoSave,
            Callback = function(value)
                SaveManager.ConfigurationSaving.AutoSave = value
            end
        })
    end

    -- Auto-save setup
    local lastSave = tick()
    RunService.Heartbeat:Connect(function()
        if tick() - lastSave >= 60 then
            lastSave = tick()
            SaveManager:AutoSaveLoop()
        end
    end)

    return Window
end

return Nythera

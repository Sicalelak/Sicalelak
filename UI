local Library = {}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

Library.Config = {
    WindowName = "Caelus V3",
    Color = Color3.fromRGB(50, 50, 50),
    AccentColor = Color3.fromRGB(70, 130, 240)
}

local function Create(instance, properties, children)
    local obj = Instance.new(instance)

    for i, v in pairs(properties or {}) do
        obj[i] = v
    end

    for i, v in pairs(children or {}) do
        v.Parent = obj
    end

    return obj
end

function Library:CreateWindow()
    if game:GetService("CoreGui"):FindFirstChild("CaelusV3") then
        game:GetService("CoreGui"):FindFirstChild("CaelusV3"):Destroy()
    end

    local CaelusV3 = Create("ScreenGui", {
        Name = "CaelusV3",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    local Main = Create("Frame", {
        Name = "Main",
        Parent = CaelusV3,
        BackgroundColor3 = Color3.fromRGB(25, 25, 30),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -350, 0.5, -225), 
        Size = UDim2.new(0, 750, 0, 450), 
        ClipsDescendants = true
    })

    local UICorner = Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = Main
    })

    local TopBar = Create("Frame", {
        Name = "TopBar",
        Parent = Main,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30)
    })

    local TopCorner = Create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = TopBar
    })

    local BottomCover = Create("Frame", {
        Name = "BottomCover",
        Parent = TopBar,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -6),
        Size = UDim2.new(1, 0, 0, 6)
    })

    local Logo = Create("ImageLabel", {
        Name = "Logo",
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 8, 0, 8),
        Size = UDim2.new(0, 16, 0, 16),
        Image = "rbxassetid://7072706620", 
        ImageColor3 = Color3.fromRGB(255, 255, 255)
    })

    local Title = Create("TextLabel", {
        Name = "Title",
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 150, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = Library.Config.WindowName,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Center
    })

    local TabNameText = Create("TextLabel", {
        Name = "TabNameText",
        Parent = TopBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 160, 0, 0),
        Size = UDim2.new(0, 100, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = "Auto", 
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local ResizeHandle = Create("TextButton", {
        Name = "ResizeHandle",
        Parent = Main,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -20, 1, -20),
        Size = UDim2.new(0, 20, 0, 20),
        Text = "",
        ZIndex = 10
    })

    local ResizeGrid = Create("Frame", {
        Name = "ResizeGrid",
        Parent = ResizeHandle,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })

    for i = 1, 6 do
        local Dot = Create("Frame", {
            Name = "Dot"..i,
            Parent = ResizeGrid,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            BorderSizePixel = 0,
            Size = UDim2.new(0, 2, 0, 2),
            BackgroundTransparency = 0.6
        })

        local xPos = (i-1) % 3 * 6
        local yPos = math.floor((i-1) / 3) * 6
        Dot.Position = UDim2.new(0, xPos, 0, yPos)
    end

    local dragging = false
    local dragInput
    local dragStart
    local startPos

    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
        end
    end)

    TopBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    local resizing = false
    local minSize = Vector2.new(750, 450) 
    local mouseOffset = Vector2.new(0, 0) 

    ResizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = UserInputService:GetMouseLocation()
            local framePos = Main.AbsolutePosition
            local frameSize = Main.AbsoluteSize

            mouseOffset = Vector2.new(
                (framePos.X + frameSize.X) - mousePos.X,
                (framePos.Y + frameSize.Y) - mousePos.Y
            )

            resizing = true
        end
    end)

    ResizeHandle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and resizing then
            local mousePos = UserInputService:GetMouseLocation()
            local absolutePos = Main.AbsolutePosition

            local width = (mousePos.X + mouseOffset.X) - absolutePos.X
            local height = (mousePos.Y + mouseOffset.Y) - absolutePos.Y

            width = math.max(width, minSize.X)
            height = math.max(height, minSize.Y)

            Main.Size = UDim2.new(0, width, 0, height)
        end
    end)

    local Sidebar = Create("Frame", {
        Name = "Sidebar",
        Parent = Main,
        BackgroundColor3 = Color3.fromRGB(30, 30, 35),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(0, 150, 1, -30)
    })

    local TitleSeparator = Create("Frame", {
        Name = "TitleSeparator",
        Parent = Sidebar,
        BackgroundColor3 = Color3.fromRGB(45, 45, 50),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 0, 30),
        Size = UDim2.new(1, -20, 0, 1)
    })

    local ContentContainer = Create("Frame", {
        Name = "ContentContainer",
        Parent = Main,
        BackgroundColor3 = Color3.fromRGB(25, 25, 30),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 150, 0, 30),
        Size = UDim2.new(1, -150, 1, -30),
        ClipsDescendants = true
    })

    local TabButtons = Create("ScrollingFrame", {
        Name = "TabButtons",
        Parent = Sidebar,
        Active = true,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 1, -50), 
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 0,
        AutomaticCanvasSize = Enum.AutomaticSize.Y
    })

    local TabButtonLayout = Create("UIListLayout", {
        Parent = TabButtons,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })

    local TabButtonPadding = Create("UIPadding", {
        Parent = TabButtons,
        PaddingTop = UDim.new(0, 10)
    })

    local UserProfile = Create("Frame", {
        Name = "UserProfile",
        Parent = Sidebar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 1, -50),
        Size = UDim2.new(1, 0, 0, 50)
    })

    local Avatar = Create("ImageLabel", {
        Name = "Avatar",
        Parent = UserProfile,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0.5, -15),
        Size = UDim2.new(0, 30, 0, 30),
        Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
    })

    local AvatarCorner = Create("UICorner", {
        CornerRadius = UDim.new(0.5, 0),
        Parent = Avatar
    })

    local Username = Create("TextLabel", {
        Name = "Username",
        Parent = UserProfile,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 55, 0, 0),
        Size = UDim2.new(1, -65, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = LocalPlayer.Name,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    spawn(function()
        local userId = LocalPlayer.UserId
        local thumbType = Enum.ThumbnailType.HeadShot
        local thumbSize = Enum.ThumbnailSize.Size420x420
        local content, isReady = Players:GetUserThumbnailAsync(userId, thumbType, thumbSize)
        Avatar.Image = content
    end)

    local Tabs = {}
    local ActiveTab = nil

    function Library:CreateTab(name, icon)
        local TabButton = Create("TextButton", {
            Name = name.."Button",
            Parent = TabButtons,
            BackgroundColor3 = Color3.fromRGB(35, 35, 40),
            BorderSizePixel = 0,
            Size = UDim2.new(0.9, 0, 0, 35),
            Font = Enum.Font.Gotham,
            Text = "",
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            AutoButtonColor = false
        })

        local TabButtonCorner = Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = TabButton
        })

        local TabIcon = Create("ImageLabel", {
            Name = "Icon",
            Parent = TabButton,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0.5, -10),
            Size = UDim2.new(0, 20, 0, 20),
            Image = icon or "rbxassetid://7072706318",
            ImageColor3 = Color3.fromRGB(255, 255, 255)
        })

        local TabName = Create("TextLabel", {
            Name = "Name",
            Parent = TabButton,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 40, 0, 0),
            Size = UDim2.new(1, -40, 1, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })

        local TabPage = Create("ScrollingFrame", {
            Name = name.."Page",
            Parent = ContentContainer,
            Active = true,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = Color3.fromRGB(70, 70, 80),
            Visible = false,
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        })

        local LeftContainer = Create("Frame", {
            Name = "LeftContainer",
            Parent = TabPage,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 10),
            Size = UDim2.new(0.5, -15, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y
        })

        local RightContainer = Create("Frame", {
            Name = "RightContainer",
            Parent = TabPage,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 5, 0, 10),
            Size = UDim2.new(0.5, -15, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y
        })

        local LeftLayout = Create("UIListLayout", {
            Parent = LeftContainer,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })

        local RightLayout = Create("UIListLayout", {
            Parent = RightContainer,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })

        TabButton.MouseButton1Click:Connect(function()
            if ActiveTab ~= TabPage then
                if ActiveTab then
                    ActiveTab.Visible = false
                end
                TabPage.Visible = true
                ActiveTab = TabPage

                local tabNameText = TopBar:FindFirstChild("TabNameText")
                if tabNameText then
                    tabNameText.Text = name
                end

                for _, tab in pairs(Tabs) do
                    if tab.Button == TabButton then
                        TweenService:Create(tab.Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 60)}):Play()
                    else
                        TweenService:Create(tab.Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}):Play()
                    end
                end
            end
        end)

        TabButton.MouseEnter:Connect(function()
            if ActiveTab ~= TabPage then
                TweenService:Create(TabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 50)}):Play()
            end
        end)

        TabButton.MouseLeave:Connect(function()
            if ActiveTab ~= TabPage then
                TweenService:Create(TabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(35, 35, 40)}):Play()
            end
        end)

        local Tab = {
            Button = TabButton,
            Page = TabPage,
            LeftContainer = LeftContainer,
            RightContainer = RightContainer
        }

        table.insert(Tabs, Tab)

        if #Tabs == 1 then
            TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
            TabPage.Visible = true
            ActiveTab = TabPage
        end

        function Tab:AddSection(sectionName, side)
            side = side or "left"
            local container = (side:lower() == "left") and LeftContainer or RightContainer

            local SectionFrame = Create("Frame", {
                Name = sectionName.."Section",
                Parent = container,
                BackgroundColor3 = Color3.fromRGB(30, 30, 35),
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 35),
                AutomaticSize = Enum.AutomaticSize.Y
            })

            local SectionCorner = Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = SectionFrame
            })

            local SectionTitle = Create("TextLabel", {
                Name = "Title",
                Parent = SectionFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -10, 0, 35),
                Font = Enum.Font.GothamBold,
                Text = sectionName,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local DropArrow = Create("ImageLabel", {
                Name = "DropArrow",
                Parent = SectionTitle,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -20, 0.5, -5),
                Size = UDim2.new(0, 10, 0, 10),
                Image = "rbxassetid://6031094670",
                ImageColor3 = Color3.fromRGB(255, 255, 255),
                Rotation = 180
            })

            local ContentFrame = Create("Frame", {
                Name = "Content",
                Parent = SectionFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 35),
                Size = UDim2.new(1, 0, 0, 0),
                ClipsDescendants = false,
                AutomaticSize = Enum.AutomaticSize.Y
            })

            local ContentPadding = Create("UIPadding", {
                Parent = ContentFrame,
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10),
                PaddingBottom = UDim.new(0, 10)
            })

            local ContentList = Create("UIListLayout", {
                Parent = ContentFrame,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8)
            })

            local expanded = true
            SectionTitle.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    expanded = not expanded
                    if expanded then
                        ContentFrame.Visible = true
                        TweenService:Create(DropArrow, TweenInfo.new(0.2), {Rotation = 180}):Play()
                    else
                        ContentFrame.Visible = false
                        TweenService:Create(DropArrow, TweenInfo.new(0.2), {Rotation = 0}):Play()
                    end
                end
            end)

            local SectionFunctions = {}

            function SectionFunctions:AddDropdown(options)
                options = options or {}
                local dropName = options.Name or "Dropdown"
                local callback = options.Callback or function() end
                local items = options.Items or {}
                local multiSelect = options.MultiSelect or false
                local maxSelections = options.MaxSelections or #items
                local defaultSelections = options.DefaultSelections or {}

                local selectedItems = {}
                if multiSelect then
                    for _, v in ipairs(defaultSelections) do
                        selectedItems[v] = true
                    end
                else
                    if #defaultSelections > 0 then
                        selectedItems[defaultSelections[1]] = true
                    end
                end

                local DropdownFrame = Create("Frame", {
                    Name = dropName.."Dropdown",
                    Parent = ContentFrame,
                    BackgroundColor3 = Color3.fromRGB(35, 35, 40),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 35),
                    ClipsDescendants = false,
                    ZIndex = 2
                })

                local DropdownCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = DropdownFrame
                })

                local HeaderFrame = Create("Frame", {
                    Name = "Header",
                    Parent = DropdownFrame,
                    BackgroundColor3 = Color3.fromRGB(35, 35, 40),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 35),
                    ZIndex = 3
                })

                local HeaderCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = HeaderFrame
                })

                local BottomCover = Create("Frame", {
                    Name = "BottomCover",
                    Parent = HeaderFrame,
                    BackgroundColor3 = Color3.fromRGB(35, 35, 40),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 1, -6),
                    Size = UDim2.new(1, 0, 0, 6),
                    Visible = false,
                    ZIndex = 3
                })

                local HeaderButton = Create("TextButton", {
                    Name = "HeaderButton",
                    Parent = HeaderFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = "",
                    ZIndex = 5
                })

                local DropdownTitle = Create("TextLabel", {
                    Name = "Title",
                    Parent = HeaderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -40, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = dropName,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ZIndex = 4
                })

                local ArrowIcon = Create("ImageLabel", {
                    Name = "Arrow",
                    Parent = HeaderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -20, 0.5, -5),
                    Size = UDim2.new(0, 10, 0, 10),
                    Image = "rbxassetid://6031094670",
                    ImageColor3 = Color3.fromRGB(255, 255, 255),
                    ZIndex = 4
                })

                local DropContent = Create("Frame", {
                    Name = "DropContent",
                    Parent = DropdownFrame,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 45),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 35),
                    Size = UDim2.new(1, 0, 0, 0), 
                    ClipsDescendants = true,
                    ZIndex = 3
                })

                local ContentCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = DropContent
                })

                local ItemsFrame = Create("ScrollingFrame", {
                    Name = "ItemsFrame",
                    Parent = DropContent,
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 1, 0),
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    ScrollBarThickness = 2,
                    ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255),
                    ScrollBarImageTransparency = 0.8,
                    VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y,
                    ZIndex = 4
                })

                local ItemsLayout = Create("UIListLayout", {
                    Parent = ItemsFrame,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 4)
                })

                local ItemsPadding = Create("UIPadding", {
                    Parent = ItemsFrame,
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5),
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5)
                })

                local dropped = false
                local connections = {} 

                local function UpdateParentLayout()

                    DropdownFrame.Size = UDim2.new(1, 0, 0, 35 + DropContent.Size.Y.Offset)

                    local section = DropdownFrame:FindFirstAncestorOfClass("Frame")
                    if section then

                        local layout = section:FindFirstChildOfClass("UIListLayout")
                        if layout then
                            layout:ApplyLayout()
                        end

                        local container = section.Parent
                        if container and container:IsA("Frame") and (container.Name == "LeftContainer" or container.Name == "RightContainer") then

                            if container:FindFirstChildOfClass("UIListLayout") then
                                container:FindFirstChildOfClass("UIListLayout"):ApplyLayout()
                            end

                            local tabPage = container.Parent
                            if tabPage and tabPage:IsA("ScrollingFrame") then

                                local leftContainer = tabPage:FindFirstChild("LeftContainer")
                                local rightContainer = tabPage:FindFirstChild("RightContainer")

                                if leftContainer and rightContainer then
                                    local leftHeight = leftContainer.AbsoluteSize.Y
                                    local rightHeight = rightContainer.AbsoluteSize.Y
                                    local maxHeight = math.max(leftHeight, rightHeight)

                                    tabPage.CanvasSize = UDim2.new(0, 0, 0, maxHeight + 20)
                                end

                                if dropped then
                                    local dropdownBottom = DropdownFrame.AbsolutePosition.Y + DropdownFrame.AbsoluteSize.Y
                                    local viewportBottom = tabPage.AbsolutePosition.Y + tabPage.AbsoluteSize.Y

                                    if dropdownBottom > viewportBottom then
                                        local newScroll = tabPage.CanvasPosition.Y + (dropdownBottom - viewportBottom) + 10
                                        tabPage.CanvasPosition = Vector2.new(0, math.min(newScroll, tabPage.CanvasSize.Y.Offset - tabPage.AbsoluteSize.Y))
                                    end
                                end
                            end

                            local mainContainer = tabPage and tabPage.Parent
                            if mainContainer and mainContainer:IsA("Frame") and mainContainer.Name == "ContentContainer" then

                                for _, child in pairs(mainContainer:GetChildren()) do
                                    if child:IsA("UIListLayout") then
                                        child:ApplyLayout()
                                    end
                                end
                            end
                        end
                    end

                    RunService.Heartbeat:Wait()
                end

                local function CalculateContentHeight()
                    local itemHeight = 25 
                    local padding = 4 
                    local totalPadding = 10 

                    local visibleItems = math.min(#items, 6) 
                    if visibleItems == 0 then return 0 end

                    local contentHeight = (visibleItems * itemHeight) + ((visibleItems - 1) * padding) + totalPadding
                    return contentHeight
                end

                local function UpdateDisplayText()
                    local selectedNames = {}
                    for item, _ in pairs(selectedItems) do
                        table.insert(selectedNames, item)
                    end

                    if #selectedNames == 0 then
                        DropdownTitle.Text = dropName
                    elseif not multiSelect then
                        DropdownTitle.Text = dropName .. ": " .. selectedNames[1]
                    elseif #selectedNames == 1 then
                        DropdownTitle.Text = dropName .. ": " .. selectedNames[1]
                    else
                        DropdownTitle.Text = dropName .. " (" .. #selectedNames .. " selected)"
                    end

                    if multiSelect then
                        callback(selectedNames)
                    else
                        callback(selectedNames[1] or nil)
                    end

                end

                local function ToggleDropdown()
                    dropped = not dropped

                    if dropped then

                        BottomCover.Visible = true

                        local contentHeight = CalculateContentHeight()

                        DropdownFrame.ClipsDescendants = false

                        TweenService:Create(ArrowIcon, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 180}):Play()

                        DropContent.Size = UDim2.new(1, 0, 0, 5)
                        UpdateParentLayout()

                        local contentTween = TweenService:Create(DropContent, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                            Size = UDim2.new(1, 0, 0, contentHeight),
                        })

                        contentTween.Completed:Connect(function()

                            UpdateParentLayout()
                        end)

                        contentTween:Play()

                        spawn(function()
                            for i = 1, 5 do
                                wait(0.05)
                                UpdateParentLayout()
                            end
                        end)

                        if connections.outsideClick then
                            connections.outsideClick:Disconnect()
                        end

                        connections.outsideClick = UserInputService.InputBegan:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                local mousePos = UserInputService:GetMouseLocation()
                                local dropdownPos = DropdownFrame.AbsolutePosition
                                local dropdownSize = DropdownFrame.AbsoluteSize + Vector2.new(0, DropContent.AbsoluteSize.Y)

                                if mousePos.X < dropdownPos.X or
                                mousePos.Y < dropdownPos.Y or
                                mousePos.X > dropdownPos.X + dropdownSize.X or
                                mousePos.Y > dropdownPos.Y + dropdownSize.Y then
                                    ToggleDropdown()
                                end
                            end
                        end)
                    else

                        TweenService:Create(ArrowIcon, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = 0}):Play()

                        spawn(function()
                            for i = 1, 5 do
                                wait(0.05)
                                UpdateParentLayout()
                            end
                        end)

                        local closeTween = TweenService:Create(DropContent, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                            Size = UDim2.new(1, 0, 0, 0),
                        })

                        closeTween.Completed:Connect(function()

                            BottomCover.Visible = false

                            UpdateParentLayout()

                            if connections.outsideClick then
                                connections.outsideClick:Disconnect()
                                connections.outsideClick = nil
                            end
                        end)

                        closeTween:Play()
                    end
                end

                connections.sizeChanged = DropContent:GetPropertyChangedSignal("Size"):Connect(function()

                    DropdownFrame.Size = UDim2.new(1, 0, 0, 35 + DropContent.Size.Y.Offset)
                    UpdateParentLayout()
                end)

                connections.renderStepped = RunService.RenderStepped:Connect(function()
                    if dropped then

                        local contentSize = DropContent.Size
                        DropdownFrame.Size = UDim2.new(1, 0, 0, 35 + contentSize.Y.Offset)
                    end
                end)

                HeaderButton.MouseButton1Click:Connect(function()
                    ToggleDropdown()
                end)

                local function CreateDropdownItems()

                    for _, child in pairs(ItemsFrame:GetChildren()) do
                        if child:IsA("TextButton") or child:IsA("Frame") then
                            child:Destroy()
                        end
                    end

                    for i, item in ipairs(items) do
                        local ItemButton = Create("TextButton", {
                            Name = item.."Item",
                            Parent = ItemsFrame,
                            BackgroundColor3 = Color3.fromRGB(45, 45, 50),
                            BackgroundTransparency = 0.9,
                            Size = UDim2.new(1, -4, 0, 25),
                            Font = Enum.Font.Gotham,
                            Text = "",
                            TextColor3 = Color3.fromRGB(255, 255, 255),
                            TextSize = 14,
                            ZIndex = 5,
                            LayoutOrder = i
                        })

                        local ItemButtonCorner = Create("UICorner", {
                            CornerRadius = UDim.new(0, 4),
                            Parent = ItemButton
                        })

                        local ItemText = Create("TextLabel", {
                            Name = "ItemText",
                            Parent = ItemButton,
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 5, 0, 0),
                            Size = UDim2.new(1, multiSelect and -30 or -10, 1, 0),
                            Font = Enum.Font.Gotham,
                            Text = item,
                            TextColor3 = Color3.fromRGB(255, 255, 255),
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            ZIndex = 5
                        })

                        if multiSelect then
                            local SelectionBox = Create("Frame", {
                                Name = "SelectionBox",
                                Parent = ItemButton,
                                BackgroundColor3 = selectedItems[item] and Library.Config.AccentColor or Color3.fromRGB(50, 50, 55),
                                BorderSizePixel = 0,
                                Position = UDim2.new(1, -25, 0.5, -7),
                                Size = UDim2.new(0, 14, 0, 14),
                                ZIndex = 6
                            })

                            local BoxCorner = Create("UICorner", {
                                CornerRadius = UDim.new(0, 3),
                                Parent = SelectionBox
                            })

                            local SelectionCheck = Create("ImageLabel", {
                                Name = "Check",
                                Parent = SelectionBox,
                                BackgroundTransparency = 1,
                                Position = UDim2.new(0, 2, 0, 2),
                                Size = UDim2.new(1, -4, 1, -4),
                                Image = "rbxassetid://7072706318",
                                ImageColor3 = Color3.fromRGB(255, 255, 255),
                                ImageTransparency = selectedItems[item] and 0 or 1,
                                ZIndex = 6
                            })

                            ItemButton.MouseButton1Click:Connect(function()

                                local currentCount = 0
                                for _, _ in pairs(selectedItems) do
                                    currentCount = currentCount + 1
                                end

                                if selectedItems[item] then

                                    selectedItems[item] = nil
                                    TweenService:Create(SelectionBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                                    TweenService:Create(SelectionCheck, TweenInfo.new(0.2), {ImageTransparency = 1}):Play()
                                else

                                    if currentCount < maxSelections then
                                        selectedItems[item] = true
                                        TweenService:Create(SelectionBox, TweenInfo.new(0.2), {BackgroundColor3 = Library.Config.AccentColor}):Play()
                                        TweenService:Create(SelectionCheck, TweenInfo.new(0.2), {ImageTransparency = 0}):Play()
                                    end
                                end

                                UpdateDisplayText()
                            end)
                        else

                            if selectedItems[item] then
                                ItemButton.BackgroundTransparency = 0.7
                                ItemButton.BackgroundColor3 = Library.Config.AccentColor
                            end

                            ItemButton.MouseButton1Click:Connect(function()

                                for _, child in pairs(ItemsFrame:GetChildren()) do
                                    if child:IsA("TextButton") then
                                        TweenService:Create(child, TweenInfo.new(0.2), {
                                            BackgroundTransparency = 0.9,
                                            BackgroundColor3 = Color3.fromRGB(45, 45, 50)
                                        }):Play()
                                    end
                                end

                                TweenService:Create(ItemButton, TweenInfo.new(0.2), {
                                    BackgroundTransparency = 0.7,
                                    BackgroundColor3 = Library.Config.AccentColor
                                }):Play()

                                for k, _ in pairs(selectedItems) do
                                    selectedItems[k] = nil
                                end
                                selectedItems[item] = true

                                UpdateDisplayText()
                                delay(0.1, function() 
                                    ToggleDropdown()
                                end)
                            end)
                        end

                        ItemButton.MouseEnter:Connect(function()
                            if not (not multiSelect and selectedItems[item]) then
                                TweenService:Create(ItemButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.5}):Play()
                            end
                        end)

                        ItemButton.MouseLeave:Connect(function()
                            if not (not multiSelect and selectedItems[item]) then
                                TweenService:Create(ItemButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.9}):Play()
                            end
                        end)
                    end
                end

                CreateDropdownItems()

                UpdateDisplayText()

                local DropdownFunctions = {}
                local flag = options.Flag or (options.Name and options.Name:gsub("[^%w]", "_"):lower()) or tostring(tick())

                function DropdownFunctions:Refresh(newItems)
                    items = newItems or items

                    if dropped then
                        ToggleDropdown()
                    end

                    CreateDropdownItems()

                    local validSelections = {}
                    for item, selected in pairs(selectedItems) do
                        local found = false
                        for _, newItem in ipairs(items) do
                            if newItem == item then
                                found = true
                                break
                            end
                        end

                        if found then
                            validSelections[item] = true
                        end
                    end

                    selectedItems = validSelections
                    UpdateDisplayText()

                    return self
                end

                function DropdownFunctions:Select(itemsToSelect, clear)
                    if clear then
                        selectedItems = {}
                    end

                    if type(itemsToSelect) == "string" then
                        itemsToSelect = {itemsToSelect}
                    end

                    for _, item in ipairs(itemsToSelect) do

                        local found = false
                        for _, existingItem in ipairs(items) do
                            if existingItem == item then
                                found = true
                                break
                            end
                        end

                        if found then
                            if multiSelect then
                                local currentCount = 0
                                for _, _ in pairs(selectedItems) do
                                    currentCount = currentCount + 1
                                end

                                if currentCount < maxSelections then
                                    selectedItems[item] = true
                                end
                            else
                                selectedItems = {}
                                selectedItems[item] = true
                                break
                            end
                        end
                    end

                    CreateDropdownItems() 
                    UpdateDisplayText()

                    return self
                end

                function DropdownFunctions:GetValue()
                    if multiSelect then
                        local selectedNames = {}
                        for item, _ in pairs(selectedItems) do
                            table.insert(selectedNames, item)
                        end
                        return selectedNames
                    else
                        for item, _ in pairs(selectedItems) do
                            return item
                        end
                        return nil
                    end
                end

                function DropdownFunctions:Set(value)
                    self:Select(value, true)
                    return self
                end

                function DropdownFunctions:Destroy()

                    for _, connection in pairs(connections) do
                        if connection then
                            connection:Disconnect()
                        end
                    end

                    if DropdownFrame and DropdownFrame.Parent then
                        DropdownFrame:Destroy()
                    end
                end

                return DropdownFunctions
            end

            function SectionFunctions:AddToggle(options)
                options = options or {}
                local toggleName = options.Name or "Toggle"
                local default = options.Default or false
                local callback = options.Callback or function() end

                local ToggleFrame = Create("Frame", {
                    Name = toggleName.."Toggle",
                    Parent = ContentFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30)
                })

                local ToggleTitle = Create("TextLabel", {
                    Name = "Title",
                    Parent = ToggleFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, -50, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = toggleName,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local ToggleButton = Create("Frame", {
                    Name = "Button",
                    Parent = ToggleFrame,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 45),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -40, 0.5, -10),
                    Size = UDim2.new(0, 40, 0, 20)
                })

                local ToggleCorner = Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleButton
                })

                local ToggleCircle = Create("Frame", {
                    Name = "Circle",
                    Parent = ToggleButton,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 2, 0.5, -8),
                    Size = UDim2.new(0, 16, 0, 16)
                })

                local CircleCorner = Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleCircle
                })

                local toggled = default

                if toggled then
                    ToggleButton.BackgroundColor3 = Library.Config.AccentColor
                    ToggleCircle.Position = UDim2.new(1, -18, 0.5, -8)
                    callback(true)
                end

                local function SetToggle(state)
                    toggled = state

                    if toggled then
                        TweenService:Create(ToggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Library.Config.AccentColor}):Play()
                        TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {Position = UDim2.new(1, -18, 0.5, -8)}):Play()
                    else
                        TweenService:Create(ToggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                        TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {Position = UDim2.new(0, 2, 0.5, -8)}):Play()
                    end

                    callback(toggled)
                end

                ToggleButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        SetToggle(not toggled)
                    end
                end)

                ToggleTitle.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        SetToggle(not toggled)
                    end
                end)

                local ToggleFunctions = {}
                local flag = options.Flag or (options.Name and options.Name:gsub("[^%w]", "_"):lower()) or tostring(tick())

                function ToggleFunctions:Set(state)
                    SetToggle(state)
                end

                function ToggleFunctions:GetValue()
                    return toggled
                end

                return ToggleFunctions
            end

            function SectionFunctions:AddRectButton(options)
                options = options or {}
                local buttonName = options.Name or "Button"
                local default = options.Default or false
                local callback = options.Callback or function() end
                local width = options.Width or 100
                local height = options.Height or 30

                local ButtonFrame = Create("Frame", {
                    Name = buttonName.."Button",
                    Parent = ContentFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, height)
                })

                local Button = Create("TextButton", {
                    Name = "Button",
                    Parent = ButtonFrame,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 45),
                    BorderSizePixel = 0,
                    Size = UDim2.new(0, width, 0, height),
                    Font = Enum.Font.Gotham,
                    Text = buttonName,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    AutoButtonColor = false
                })

                local ButtonCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = Button
                })

                local active = default

                if active then
                    Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    Button.TextColor3 = Color3.fromRGB(30, 30, 35)
                    callback(true)
                end

                local function SetButton(state)
                    active = state

                    if active then
                        TweenService:Create(Button, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                            TextColor3 = Color3.fromRGB(30, 30, 35)
                        }):Play()
                    else
                        TweenService:Create(Button, TweenInfo.new(0.2), {
                            BackgroundColor3 = Color3.fromRGB(40, 40, 45),
                            TextColor3 = Color3.fromRGB(255, 255, 255)
                        }):Play()
                    end

                    callback(active)
                end

                Button.MouseButton1Click:Connect(function()
                    SetButton(not active)
                end)

                Button.MouseEnter:Connect(function()
                    if not active then
                        TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                    end
                end)

                Button.MouseLeave:Connect(function()
                    if not active then
                        TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                    end
                end)

                local ButtonFunctions = {}
                local flag = options.Flag or (options.Name and options.Name:gsub("[^%w]", "_"):lower()) or tostring(tick())

                function ButtonFunctions:Set(state)
                    SetButton(state)
                end

                function ButtonFunctions:GetValue()
                    return active
                end

                return ButtonFunctions
            end

            function SectionFunctions:AddButton(options)
                options = options or {}
                local buttonName = options.Name or "Button"
                local callback = options.Callback or function() end
                local width = options.Width or 1 

                local ButtonFrame = Create("Frame", {
                    Name = buttonName.."Button",
                    Parent = ContentFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30)
                })

                local Button = Create("TextButton", {
                    Name = "Button",
                    Parent = ButtonFrame,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 45),
                    BorderSizePixel = 0,
                    Size = (width == 1) and UDim2.new(1, 0, 0, 30) or UDim2.new(0, width, 0, 30),
                    Font = Enum.Font.Gotham,
                    Text = buttonName,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    AutoButtonColor = false
                })

                local ButtonCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = Button
                })

                Button.MouseButton1Click:Connect(function()

                    TweenService:Create(Button, TweenInfo.new(0.1), {BackgroundColor3 = Library.Config.AccentColor}):Play()
                    wait(0.1)
                    TweenService:Create(Button, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()

                    callback()
                end)

                Button.MouseEnter:Connect(function()
                    TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                end)

                Button.MouseLeave:Connect(function()
                    TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                end)
            end

            function SectionFunctions:AddSlider(options)
                options = options or {}
                local sliderName = options.Name or "Slider"
                local min = options.Min or 0
                local max = options.Max or 100
                local default = options.Default or min
                local callback = options.Callback or function() end
                local suffix = options.Suffix or ""

                local SliderFrame = Create("Frame", {
                    Name = sliderName.."Slider",
                    Parent = ContentFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                })

                local SliderTitle = Create("TextLabel", {
                    Name = "Title",
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = sliderName,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local ValueDisplay = Create("TextLabel", {
                    Name = "Value",
                    Parent = SliderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -40, 0, 0),
                    Size = UDim2.new(0, 40, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = tostring(default)..suffix,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Right
                })

                local SliderBack = Create("Frame", {
                    Name = "SliderBack",
                    Parent = SliderFrame,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 45),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 10)
                })

                local SliderBackCorner = Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderBack
                })

                local SliderFill = Create("Frame", {
                    Name = "SliderFill",
                    Parent = SliderBack,
                    BackgroundColor3 = Library.Config.AccentColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                })

                local SliderFillCorner = Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = SliderFill
                })

                local SliderButton = Create("TextButton", {
                    Name = "SliderButton",
                    Parent = SliderBack,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = ""
                })

                local sliding = false
                local value = default

                local saveDebounce = false
                local saveDebounceTime = 0.5 
                local saveDebounceConnection = nil

                local function UpdateSlider(newValue, skipCallback)
                    value = math.clamp(newValue, min, max)

                    local percent = (value - min) / (max - min)
                    TweenService:Create(SliderFill, TweenInfo.new(0.1), {Size = UDim2.new(percent, 0, 1, 0)}):Play()
                    ValueDisplay.Text = tostring(math.floor(value * 100) / 100)..suffix

                    if not skipCallback then
                        callback(value)

                        if saveDebounceConnection then
                            saveDebounceConnection:Disconnect()
                            saveDebounceConnection = nil
                        end

                        saveDebounceConnection = task.delay(saveDebounceTime, function()
                            -- Optional auto-save logic here if needed
                        end)
                    end
                end

                SliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        sliding = true

                        local relX = math.clamp((input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
                        local newValue = min + (relX * (max - min))
                        UpdateSlider(newValue)
                    end
                end)

                UserInputService.InputEnded:Connect(function(input)
                    if sliding and input.UserInputType == Enum.UserInputType.MouseButton1 then
                        sliding = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if sliding and input.UserInputType == Enum.UserInputType.MouseMovement then

                        local relX = math.clamp((input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
                        local newValue = min + (relX * (max - min))
                        UpdateSlider(newValue)
                    end
                end)

                UpdateSlider(default, true)

                local SliderFunctions = {}
                local flag = options.Flag or (options.Name and options.Name:gsub("[^%w]", "_"):lower()) or tostring(tick())

                function SliderFunctions:Set(newValue)
                    UpdateSlider(newValue)
                end

                function SliderFunctions:GetValue()
                    return value
                end

                return SliderFunctions
            end

            function SectionFunctions:AddInput(options)
                options = options or {}
                local inputName = options.Name or "Input"
                local default = options.Default or ""
                local callback = options.Callback or function() end
                local numOnly = options.NumbersOnly or false
                local maxLength = options.MaxLength or 20
                local numberValue = options.DefaultNumber or 0
                local minValue = options.MinValue or 0
                local maxValue = options.MaxValue or 100

                local InputFrame = Create("Frame", {
                    Name = inputName.."Input",
                    Parent = ContentFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                })

                local InputTitle = Create("TextLabel", {
                    Name = "Title",
                    Parent = InputFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(0.5, 0, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = inputName,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local InputBox = Create("Frame", {
                    Name = "InputBox",
                    Parent = InputFrame,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 45),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 30)
                })

                local InputBoxCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = InputBox
                })

                local ToggleIndicator = Create("Frame", {
                    Name = "ToggleIndicator",
                    Parent = InputBox,
                    BackgroundColor3 = Color3.fromRGB(50, 50, 55),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -30, 0.5, -10),
                    Size = UDim2.new(0, 20, 0, 20)
                })

                local IndicatorCorner = Create("UICorner", {
                    CornerRadius = UDim.new(1, 0),
                    Parent = ToggleIndicator
                })

                local NumberInputBox = Create("Frame", {
                    Name = "NumberInput",
                    Parent = InputBox,
                    BackgroundColor3 = Color3.fromRGB(50, 50, 55),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -120, 0.5, -12),
                    Size = UDim2.new(0, 80, 0, 24),
                    ZIndex = 2
                })

                local NumberInputCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = NumberInputBox
                })

                local NumberBox = Create("TextBox", {
                    Name = "NumberBox",
                    Parent = NumberInputBox,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 5, 0, 0),
                    Size = UDim2.new(1, -10, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = tostring(numberValue),
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    ClearTextOnFocus = false,
                    ZIndex = 3
                })

                local FixedText = Create("TextLabel", {
                    Name = "FixedText",
                    Parent = InputBox,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -140, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = default,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local active = false

                ToggleIndicator.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        active = not active

                        if active then
                            TweenService:Create(ToggleIndicator, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 255, 255)}):Play()
                        else
                            TweenService:Create(ToggleIndicator, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                        end

                        callback(FixedText.Text, tonumber(NumberBox.Text) or numberValue, active)
                    end
                end)

                NumberBox.FocusLost:Connect(function(enterPressed)
                    local inputValue = tonumber(NumberBox.Text) or numberValue

                    inputValue = math.clamp(inputValue, minValue, maxValue)
                    NumberBox.Text = tostring(inputValue)

                    callback(FixedText.Text, inputValue, active)
                end)

                local InputFunctions = {}
                local flag = options.Flag or (options.Name and options.Name:gsub("[^%w]", "_"):lower()) or tostring(tick())

                function InputFunctions:SetFixedText(text)
                    FixedText.Text = text
                    callback(text, tonumber(NumberBox.Text) or numberValue, active)
                end

                function InputFunctions:SetNumber(number)
                    local value = math.clamp(number, minValue, maxValue)
                    NumberBox.Text = tostring(value)
                    callback(FixedText.Text, value, active)
                end

                function InputFunctions:GetFixedText()
                    return FixedText.Text
                end

                function InputFunctions:GetNumber()
                    return tonumber(NumberBox.Text) or numberValue
                end

                function InputFunctions:GetValue()
                    return {
                        text = FixedText.Text, 
                        number = tonumber(NumberBox.Text) or numberValue, 
                        active = active
                    }
                end

                function InputFunctions:Set(value)
                    if type(value) == "table" then
                        if value.text then
                            self:SetFixedText(value.text)
                        end
                        if value.number then
                            self:SetNumber(value.number)
                        end
                        if value.active ~= nil then
                            self:SetActive(value.active)
                        end
                    else
                        self:SetFixedText(tostring(value))
                    end
                    return self
                end

                function InputFunctions:SetActive(state)
                    active = state

                    if active then
                        ToggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                    else
                        ToggleIndicator.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
                    end

                    callback(FixedText.Text, tonumber(NumberBox.Text) or numberValue, active)
                end

                return InputFunctions
            end

            function SectionFunctions:AddInputLetterAdd(options)
                options = options or {}
                local inputName = options.Name or "Input"
                local default = options.Default or ""
                local callback = options.Callback or function() end
                local placeholderText = options.PlaceholderText or "Type here..."
                local maxLength = options.MaxLength or 100

                local InputFrame = Create("Frame", {
                    Name = inputName.."LetterInput",
                    Parent = ContentFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                })

                local InputTitle = Create("TextLabel", {
                    Name = "Title",
                    Parent = InputFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = inputName,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local InputBox = Create("Frame", {
                    Name = "InputBox",
                    Parent = InputFrame,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 45),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 30)
                })

                local InputBoxCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = InputBox
                })

                local TextBox = Create("TextBox", {
                    Name = "TextBox",
                    Parent = InputBox,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -20, 1, 0),
                    Font = Enum.Font.Gotham,
                    Text = default,
                    PlaceholderText = placeholderText,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    PlaceholderColor3 = Color3.fromRGB(180, 180, 180),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ClearTextOnFocus = false,
                    ClipsDescendants = true
                })

                TextBox.FocusLost:Connect(function(enterPressed)

                    if maxLength and #TextBox.Text > maxLength then
                        TextBox.Text = string.sub(TextBox.Text, 1, maxLength)
                    end

                    callback(TextBox.Text)
                end)

                TextBox:GetPropertyChangedSignal("Text"):Connect(function()
                    if maxLength and #TextBox.Text > maxLength then
                        TextBox.Text = string.sub(TextBox.Text, 1, maxLength)
                    end
                end)

                InputBox.MouseEnter:Connect(function()
                    TweenService:Create(InputBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}):Play()
                end)

                InputBox.MouseLeave:Connect(function()
                    TweenService:Create(InputBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                end)

                TextBox.Focused:Connect(function()
                    TweenService:Create(InputBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 65)}):Play()
                end)

                TextBox.FocusLost:Connect(function()
                    TweenService:Create(InputBox, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}):Play()
                end)

                local InputFunctions = {}
                local flag = options.Flag or (options.Name and options.Name:gsub("[^%w]", "_"):lower()) or tostring(tick())

                function InputFunctions:SetText(text)
                    TextBox.Text = text
                    callback(text)
                end

                function InputFunctions:GetText()
                    return TextBox.Text
                end

                function InputFunctions:GetValue()
                    return TextBox.Text
                end

                function InputFunctions:Set(value)
                    if type(value) == "string" then
                        self:SetText(value)
                    end
                    return self
                end

                return InputFunctions
            end

            function SectionFunctions:AddStatusDisplay(options)
                options = options or {}
                local title = options.Title or "Current Hunt Status:"
                local refreshCallback = options.RefreshCallback or function() end

                local StatusFrame = Create("Frame", {
                    Name = "StatusDisplay",
                    Parent = ContentFrame,
                    BackgroundColor3 = Color3.fromRGB(25, 25, 30),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 150),
                    AutomaticSize = Enum.AutomaticSize.Y
                })

                local StatusCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = StatusFrame
                })

                local TopBar = Create("Frame", {
                    Name = "TopBar",
                    Parent = StatusFrame,
                    BackgroundColor3 = Color3.fromRGB(30, 30, 35),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 35)
                })

                local TopCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = TopBar
                })

                local BottomCover = Create("Frame", {
                    Name = "BottomCover",
                    Parent = TopBar,
                    BackgroundColor3 = Color3.fromRGB(30, 30, 35),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 1, -6),
                    Size = UDim2.new(1, 0, 0, 6)
                })

                local StatusTitle = Create("TextLabel", {
                    Name = "StatusTitle",
                    Parent = TopBar,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -100, 1, 0),
                    Font = Enum.Font.GothamBold,
                    Text = title,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local RefreshButton = Create("TextButton", {
                    Name = "RefreshButton",
                    Parent = TopBar,
                    BackgroundColor3 = Color3.fromRGB(70, 130, 240),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -80, 0.5, -12),
                    Size = UDim2.new(0, 70, 0, 24),
                    Font = Enum.Font.GothamBold,
                    Text = "Refresh",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 12,
                    AutoButtonColor = false
                })

                local RefreshCorner = Create("UICorner", {
                    CornerRadius = UDim.new(0, 4),
                    Parent = RefreshButton
                })

                local StatusContent = Create("Frame", {
                    Name = "StatusContent",
                    Parent = StatusFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 35),
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y
                })

                local ContentPadding = Create("UIPadding", {
                    Parent = StatusContent,
                    PaddingLeft = UDim.new(0, 10),
                    PaddingRight = UDim.new(0, 10),
                    PaddingTop = UDim.new(0, 10),
                    PaddingBottom = UDim.new(0, 10)
                })

                local ContentList = Create("UIListLayout", {
                    Parent = StatusContent,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 10)
                })

                local StatusLabel = Create("TextLabel", {
                    Name = "StatusLabel",
                    Parent = StatusContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.Gotham,
                    Text = "No matching eggs found. Check your selection or try a fallback",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    LayoutOrder = 1
                })

                local ItemsTitle = Create("TextLabel", {
                    Name = "ItemsTitle",
                    Parent = StatusContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = Enum.Font.GothamBold,
                    Text = "Available Eggs:",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    LayoutOrder = 2
                })

                local ItemsContainer = Create("Frame", {
                    Name = "ItemsContainer",
                    Parent = StatusContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 0),
                    AutomaticSize = Enum.AutomaticSize.Y,
                    LayoutOrder = 3
                })

                local ItemsLayout = Create("UIListLayout", {
                    Parent = ItemsContainer,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 5)
                })

                RefreshButton.MouseButton1Click:Connect(function()
                    TweenService:Create(RefreshButton, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(50, 100, 200)}):Play()
                    wait(0.1)
                    TweenService:Create(RefreshButton, TweenInfo.new(0.1), {BackgroundColor3 = Color3.fromRGB(70, 130, 240)}):Play()

                    refreshCallback()
                end)

                RefreshButton.MouseEnter:Connect(function()
                    TweenService:Create(RefreshButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(90, 150, 255)}):Play()
                end)

                RefreshButton.MouseLeave:Connect(function()
                    TweenService:Create(RefreshButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 130, 240)}):Play()
                end)

                local StatusFunctions = {}

                function StatusFunctions:SetStatus(text)
                    StatusLabel.Text = text
                end

                function StatusFunctions:SetItemsTitle(text)
                    ItemsTitle.Text = text
                end

                function StatusFunctions:ClearItems()
                    for _, child in pairs(ItemsContainer:GetChildren()) do
                        if child:IsA("Frame") then
                            child:Destroy()
                        end
                    end
                end

                function StatusFunctions:AddItem(itemName, quantity)
                    local ItemFrame = Create("Frame", {
                        Name = itemName.."Item",
                        Parent = ItemsContainer,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 0, 25)
                    })

                    local ItemIcon = Create("ImageLabel", {
                        Name = "Icon",
                        Parent = ItemFrame,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0.5, -10),
                        Size = UDim2.new(0, 20, 0, 20),
                        Image = "rbxassetid://7072718362" 
                    })

                    local ItemName = Create("TextLabel", {
                        Name = "Name",
                        Parent = ItemFrame,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 30, 0, 0),
                        Size = UDim2.new(1, -80, 1, 0),
                        Font = Enum.Font.Gotham,
                        Text = itemName,
                        TextColor3 = Color3.fromRGB(255, 255, 255),
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Left
                    })

                    local ItemQuantity = Create("TextLabel", {
                        Name = "Quantity",
                        Parent = ItemFrame,
                        BackgroundTransparency = 1,
                        Position = UDim2.new(1, -50, 0, 0),
                        Size = UDim2.new(0, 50, 1, 0),
                        Font = Enum.Font.GothamBold,
                        Text = "x"..tostring(quantity),
                        TextColor3 = Color3.fromRGB(255, 255, 255),
                        TextSize = 14,
                        TextXAlignment = Enum.TextXAlignment.Right
                    })

                    return ItemFrame
                end

                return StatusFunctions
            end

            return SectionFunctions
        end

        return Tab
    end

    return Main
end

local Window = Library:CreateWindow()

return Library

--[[
    Caelus UI Library V2
    A complete rewrite focused on optimizations and ease of use
    Features:
    - Automatic settings saving
    - Containment within Roblox window
    - UI Resizing from corner
    - Improved element creation API
    - Maintains all original functionality
]]

local CaelusUILibrary = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

-- Configuration
local CONFIG = {
    UIName = "Caelus V2",
    SaveFileName = "CaelusV2_Settings",
    DefaultSize = UDim2.new(0, 600, 0, 400),
    MinSize = UDim2.new(0, 400, 0, 300),
    CornerRadius = UDim.new(0, 20),
    Elements = {
        TopBar = {
            Height = 40,
            Color = Color3.fromRGB(20, 20, 30)
        },
        Sidebar = {
            Width = 150,
            Color = Color3.fromRGB(30, 30, 40)
        },
        Content = {
            Color = Color3.fromRGB(35, 35, 45)
        },
        Button = {
            Color = Color3.fromRGB(65, 105, 225),
            HoverColor = Color3.fromRGB(85, 125, 245),
            PressColor = Color3.fromRGB(55, 95, 215),
            TextColor = Color3.fromRGB(255, 255, 255)
        },
        Toggle = {
            BackgroundColor = Color3.fromRGB(30, 30, 40),
            ActiveColor = Color3.fromRGB(65, 175, 105),
            InactiveColor = Color3.fromRGB(30, 30, 40),
            TextColor = Color3.fromRGB(255, 255, 255)
        },
        Dropdown = {
            HeaderColor = Color3.fromRGB(40, 40, 50),
            OptionColor = Color3.fromRGB(60, 60, 70),
            HoverColor = Color3.fromRGB(70, 70, 80),
            TextColor = Color3.fromRGB(255, 255, 255)
        },
        Slider = {
            BackgroundColor = Color3.fromRGB(40, 40, 50),
            SliderColor = Color3.fromRGB(65, 175, 105),
            TextColor = Color3.fromRGB(255, 255, 255)
        }
    },
    Tweens = {
        Default = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        Fast = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        Bounce = TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out)
    }
}

-- Utility Functions
local Utility = {
    -- Create a basic object with properties
    Create = function(className, properties)
        local obj = Instance.new(className)
        for k, v in pairs(properties or {}) do
            obj[k] = v
        end
        return obj
    end,

    -- Apply UI corner to an object
    ApplyCorner = function(parent, radius)
        local corner = Instance.new("UICorner")
        corner.CornerRadius = radius or CONFIG.CornerRadius
        corner.Parent = parent
        return corner
    end,

    -- Apply UI gradient to an object
    ApplyGradient = function(parent, colorSeq, rotation)
        local gradient = Instance.new("UIGradient")
        gradient.Color = colorSeq or ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(35, 35, 45)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 35))
        })
        gradient.Rotation = rotation or 45
        gradient.Parent = parent
        return gradient
    end,

    -- Save settings to file
    SaveSettings = function(settings)
        if not settings then return end
        
        pcall(function()
            local json = HttpService:JSONEncode(settings)
            if writefile then
                writefile(CONFIG.SaveFileName..".json", json)
            end
        end)
    end,

    -- Load settings from file
    LoadSettings = function()
        local settings = {}
        pcall(function()
            if readfile and isfile and isfile(CONFIG.SaveFileName..".json") then
                local json = readfile(CONFIG.SaveFileName..".json")
                settings = HttpService:JSONDecode(json)
            end
        end)
        return settings
    end,

    -- Keep UI within screen bounds
    ClampPosition = function(position, size, parentSize)
        local minX, minY = 0, 0
        local maxX = parentSize.X - size.X
        local maxY = parentSize.Y - size.Y
        
        return UDim2.new(
            0, math.clamp(position.X.Offset, minX, maxX),
            0, math.clamp(position.Y.Offset, minY, maxY)
        )
    end
}

-- Initialize the UI Library
function CaelusUILibrary:Init(customConfig)
    -- Merge custom config with default config
    if customConfig then
        for k, v in pairs(customConfig) do
            CONFIG[k] = v
        end
    end
    
    -- Create main ScreenGui
    local screenGui = Utility.Create("ScreenGui", {
        Name = CONFIG.UIName,
        Parent = CoreGui,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Create main frame
    local mainFrame = Utility.Create("Frame", {
        Name = "MainFrame",
        Parent = screenGui,
        BackgroundColor3 = Color3.fromRGB(25, 25, 35),
        Position = UDim2.new(0.5, -CONFIG.DefaultSize.X.Offset/2, 0.5, -CONFIG.DefaultSize.Y.Offset/2),
        Size = CONFIG.DefaultSize,
        ClipsDescendants = true,
        Active = true
    })
    
    Utility.ApplyCorner(mainFrame)
    Utility.ApplyGradient(mainFrame)
    
    -- Create top bar
    local topBar = Utility.Create("Frame", {
        Name = "TopBar",
        Parent = mainFrame,
        BackgroundColor3 = CONFIG.Elements.TopBar.Color,
        Size = UDim2.new(1, 0, 0, CONFIG.Elements.TopBar.Height),
        ZIndex = 2
    })
    
    Utility.ApplyCorner(topBar)
    
    -- Add title to top bar
    local titleLabel = Utility.Create("TextLabel", {
        Name = "TitleLabel",
        Parent = topBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 20, 0, 0),
        Size = UDim2.new(0, 200, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = CONFIG.UIName,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Add close button
    local closeButton = Utility.Create("TextButton", {
        Name = "CloseButton",
        Parent = topBar,
        BackgroundColor3 = Color3.fromRGB(35, 35, 45),
        Position = UDim2.new(1, -60, 0.5, -15),
        Size = UDim2.new(0, 40, 0, 30),
        Font = Enum.Font.GothamBold,
        Text = "X",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16
    })
    
    Utility.ApplyCorner(closeButton, UDim.new(0, 6))
    
    -- Add minimize button
    local minimizeButton = Utility.Create("TextButton", {
        Name = "MinimizeButton",
        Parent = topBar,
        BackgroundColor3 = Color3.fromRGB(35, 35, 45),
        Position = UDim2.new(1, -110, 0.5, -15),
        Size = UDim2.new(0, 40, 0, 30),
        Font = Enum.Font.GothamBold,
        Text = "-",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20
    })
    
    Utility.ApplyCorner(minimizeButton, UDim.new(0, 6))
    
    -- Create sidebar
    local sidebar = Utility.Create("Frame", {
        Name = "Sidebar",
        Parent = mainFrame,
        BackgroundColor3 = CONFIG.Elements.Sidebar.Color,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, CONFIG.Elements.TopBar.Height),
        Size = UDim2.new(0, CONFIG.Elements.Sidebar.Width, 1, -CONFIG.Elements.TopBar.Height)
    })
    
    -- Create content frame
    local contentFrame = Utility.Create("Frame", {
        Name = "ContentFrame",
        Parent = mainFrame,
        BackgroundColor3 = CONFIG.Elements.Content.Color,
        BorderSizePixel = 0,
        Position = UDim2.new(0, CONFIG.Elements.Sidebar.Width, 0, CONFIG.Elements.TopBar.Height),
        Size = UDim2.new(1, -CONFIG.Elements.Sidebar.Width, 1, -CONFIG.Elements.TopBar.Height)
    })
    
    -- Create resize handle
    local resizeHandle = Utility.Create("TextButton", {
        Name = "ResizeHandle",
        Parent = mainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -20, 1, -20),
        Size = UDim2.new(0, 20, 0, 20),
        Text = "",
        ZIndex = 10
    })
    
    local resizeIcon = Utility.Create("TextLabel", {
        Name = "ResizeIcon",
        Parent = resizeHandle,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = Enum.Font.SourceSans,
        Text = "âŒŸ",
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 16,
        Rotation = 90,
        ZIndex = 10
    })
    
    -- Create tab buttons container
    local tabButtonsContainer = Utility.Create("ScrollingFrame", {
        Name = "TabButtonsContainer",
        Parent = sidebar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 10),
        Size = UDim2.new(1, 0, 1, -10),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255),
        VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
    })
    
    -- Create tab container
    local tabContainer = Utility.Create("Frame", {
        Name = "TabContainer",
        Parent = contentFrame,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0)
    })
    
    -- Initialize state
    local uiState = {
        MinimizedSize = UDim2.new(0, CONFIG.DefaultSize.X.Offset, 0, CONFIG.Elements.TopBar.Height),
        OriginalSize = CONFIG.DefaultSize,
        IsMinimized = false,
        IsDragging = false,
        IsResizing = false,
        DragOffset = Vector2.new(0, 0),
        TabButtons = {},
        TabPages = {},
        CurrentTab = nil,
        Settings = Utility.LoadSettings() or {},
        ToggleCallbacks = {},
        SliderCallbacks = {}
    }
    
    -- Handle closing
    closeButton.MouseButton1Click:Connect(function()
        screenGui.Enabled = false
    end)
    
    -- Handle minimizing
    minimizeButton.MouseButton1Click:Connect(function()
        uiState.IsMinimized = not uiState.IsMinimized
        
        if uiState.IsMinimized then
            TweenService:Create(mainFrame, CONFIG.Tweens.Default, {
                Size = uiState.MinimizedSize
            }):Play()
            sidebar.Visible = false
            contentFrame.Visible = false
            resizeHandle.Visible = false
        else
            TweenService:Create(mainFrame, CONFIG.Tweens.Default, {
                Size = uiState.OriginalSize
            }):Play()
            sidebar.Visible = true
            contentFrame.Visible = true
            resizeHandle.Visible = true
        end
    end)
    
    -- Make UI draggable
    local function updateDrag(input)
        if uiState.IsDragging and not uiState.IsResizing then
            local delta = input.Position - uiState.DragOffset
            local position = UDim2.new(0, delta.X, 0, delta.Y)
            
            -- Clamp position to keep inside screen
            local screenSize = Vector2.new(
                workspace.CurrentCamera.ViewportSize.X, 
                workspace.CurrentCamera.ViewportSize.Y
            )
            
            position = Utility.ClampPosition(
                position, 
                mainFrame.AbsoluteSize, 
                screenSize
            )
            
            mainFrame.Position = position
        end
    end
    
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            uiState.IsDragging = true
            uiState.DragOffset = input.Position
        end
    end)
    
    topBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            uiState.IsDragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if uiState.IsDragging then
                updateDrag(input)
            elseif uiState.IsResizing then
                -- Handle resizing
                local mousePos = input.Position
                local framePos = mainFrame.AbsolutePosition
                local newWidth = mousePos.X - framePos.X
                local newHeight = mousePos.Y - framePos.Y
                
                -- Clamp size to minimum
                newWidth = math.max(newWidth, CONFIG.MinSize.X.Offset)
                newHeight = math.max(newHeight, CONFIG.MinSize.Y.Offset)
                
                -- Update size
                mainFrame.Size = UDim2.new(0, newWidth, 0, newHeight)
                uiState.OriginalSize = mainFrame.Size
            end
        end
    end)
    
    -- Handle resizing
    resizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            uiState.IsResizing = true
        end
    end)
    
    resizeHandle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            uiState.IsResizing = false
        end
    end)
    
    -- Create API for our library
    local libraryAPI = {}
    
    -- Create a tab
    function libraryAPI:CreateTab(name, icon)
        -- Create tab button
        local tabButton = Utility.Create("TextButton", {
            Name = name.."Button",
            Parent = tabButtonsContainer,
            BackgroundColor3 = Color3.fromRGB(40, 40, 50),
            BorderSizePixel = 0,
            Size = UDim2.new(1, -16, 0, 36),
            Position = UDim2.new(0, 8, 0, #uiState.TabButtons * 44),
            Font = Enum.Font.GothamBold,
            Text = name,
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 15
        })
        
        Utility.ApplyCorner(tabButton, UDim.new(0, 6))
        
        -- Create icon if provided
        if icon then
            local iconLabel = Utility.Create("TextLabel", {
                Name = "Icon",
                Parent = tabButton,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(0, 20, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = icon,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 16
            })
            
            tabButton.Text = "   " .. name
            tabButton.TextXAlignment = Enum.TextXAlignment.Left
        end
        
        -- Create tab page
        local tabPage = Utility.Create("ScrollingFrame", {
            Name = name.."Page",
            Parent = tabContainer,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255),
            Visible = false,
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            ScrollingDirection = Enum.ScrollingDirection.Y
        })
        
        -- Add padding to tab page
        local padding = Utility.Create("UIPadding", {
            Parent = tabPage,
            PaddingLeft = UDim.new(0, 15),
            PaddingRight = UDim.new(0, 15),
            PaddingTop = UDim.new(0, 15),
            PaddingBottom = UDim.new(0, 15)
        })
        
        -- Add auto layout for tab page
        local layout = Utility.Create("UIListLayout", {
            Parent = tabPage,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            if uiState.CurrentTab then
                uiState.CurrentTab.Button.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
                uiState.CurrentTab.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
                uiState.CurrentTab.Page.Visible = false
            end
            
            tabButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
            tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            tabPage.Visible = true
            
            uiState.CurrentTab = {Button = tabButton, Page = tabPage}
        end)
        
        -- Add to tab list
        table.insert(uiState.TabButtons, tabButton)
        uiState.TabPages[name] = tabPage
        
        -- Update scroll frame
        tabButtonsContainer.CanvasSize = UDim2.new(0, 0, 0, #uiState.TabButtons * 50 + 10)
        
        -- Select first tab by default
        if #uiState.TabButtons == 1 then
            tabButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
            tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            tabPage.Visible = true
            uiState.CurrentTab = {Button = tabButton, Page = tabPage}
        end
        
        -- Create section functions
        local tabAPI = {}
        
        -- Create a section within the tab
        function tabAPI:CreateSection(title)
            local sectionContainer = Utility.Create("Frame", {
                Name = title.."Section",
                Parent = tabPage,
                BackgroundColor3 = Color3.fromRGB(40, 40, 50),
                Size = UDim2.new(1, 0, 0, 40),
                BorderSizePixel = 0,
                LayoutOrder = #tabPage:GetChildren()
            })
            
            Utility.ApplyCorner(sectionContainer, UDim.new(0, 6))
            
            local sectionTitle = Utility.Create("TextLabel", {
                Name = "Title",
                Parent = sectionContainer,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = title,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local sectionContent = Utility.Create("Frame", {
                Name = "Content",
                Parent = tabPage,
                BackgroundColor3 = Color3.fromRGB(50, 50, 60),
                BorderSizePixel = 0,
                Size = UDim2.new(1, 0, 0, 0), -- Will be autosized
                LayoutOrder = #tabPage:GetChildren() + 1,
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            Utility.ApplyCorner(sectionContent, UDim.new(0, 6))
            
            -- Add padding and layout for content
            local contentPadding = Utility.Create("UIPadding", {
                Parent = sectionContent,
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10),
                PaddingTop = UDim.new(0, 10),
                PaddingBottom = UDim.new(0, 10)
            })
            
            local contentLayout = Utility.Create("UIListLayout", {
                Parent = sectionContent,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8)
            })
            
            local sectionAPI = {}
            
            -- Create a button
            function sectionAPI:AddButton(text, callback)
                local button = Utility.Create("TextButton", {
                    Name = text.."Button",
                    Parent = sectionContent,
                    BackgroundColor3 = CONFIG.Elements.Button.Color,
                    Size = UDim2.new(1, 0, 0, 36),
                    Font = Enum.Font.GothamBold,
                    Text = text,
                    TextColor3 = CONFIG.Elements.Button.TextColor,
                    TextSize = 14,
                    LayoutOrder = #sectionContent:GetChildren()
                })
                
                Utility.ApplyCorner(button, UDim.new(0, 6))
                
                -- Button hover and click effects
                button.MouseEnter:Connect(function()
                    TweenService:Create(button, CONFIG.Tweens.Fast, {
                        BackgroundColor3 = CONFIG.Elements.Button.HoverColor
                    }):Play()
                end)
                
                button.MouseLeave:Connect(function()
                    TweenService:Create(button, CONFIG.Tweens.Fast, {
                        BackgroundColor3 = CONFIG.Elements.Button.Color
                    }):Play()
                end)
                
                button.MouseButton1Down:Connect(function()
                    TweenService:Create(button, CONFIG.Tweens.Fast, {
                        BackgroundColor3 = CONFIG.Elements.Button.PressColor,
                        Size = UDim2.new(1, -4, 0, 34),
                        Position = UDim2.new(0, 2, 0, 1)
                    }):Play()
                end)
                
                button.MouseButton1Up:Connect(function()
                    TweenService:Create(button, CONFIG.Tweens.Fast, {
                        BackgroundColor3 = CONFIG.Elements.Button.HoverColor,
                        Size = UDim2.new(1, 0, 0, 36),
                        Position = UDim2.new(0, 0, 0, 0)
                    }):Play()
                end)
                
                button.MouseButton1Click:Connect(function()
                    pcall(callback)
                end)
                
                return button
            end
            
            -- Create a toggle
            function sectionAPI:AddToggle(text, default, callback, identifier)
                local toggleId = identifier or text
                
                -- Check if we have a saved setting
                local isEnabled = false
                if uiState.Settings[toggleId] ~= nil then
                    isEnabled = uiState.Settings[toggleId]
                elseif default ~= nil then
                    isEnabled = default
                end
                
                local toggleContainer = Utility.Create("Frame", {
                    Name = text.."Toggle",
                    Parent = sectionContent,
                    BackgroundColor3 = Color3.fromRGB(60, 60, 70),
                    Size = UDim2.new(1, 0, 0, 36),
                    LayoutOrder = #sectionContent:GetChildren()
                })
                
                Utility.ApplyCorner(toggleContainer, UDim.new(0, 6))
                
                local toggleLabel = Utility.Create("TextLabel", {
                    Name = "Label",
                    Parent = toggleContainer,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -60, 1, 0),
                    Font = Enum.Font.GothamBold,
                    Text = text,
                    TextColor3 = CONFIG.Elements.Toggle.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local toggleButton = Utility.Create("Frame", {
                    Name = "Button",
                    Parent = toggleContainer,
                    AnchorPoint = Vector2.new(1, 0.5),
                    Position = UDim2.new(1, -10, 0.5, 0),
                    Size = UDim2.new(0, 40, 0, 20),
                    BackgroundColor3 = isEnabled and 
                        CONFIG.Elements.Toggle.ActiveColor or 
                        CONFIG.Elements.Toggle.InactiveColor
                })
                
                Utility.ApplyCorner(toggleButton, UDim.new(1, 0))
                
                local toggleIndicator = Utility.Create("Frame", {
                    Name = "Indicator",
                    Parent = toggleButton,
                    Position = isEnabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
                    Size = UDim2.new(0, 16, 0, 16),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                })
                
                Utility.ApplyCorner(toggleIndicator, UDim.new(1, 0))
                
                local toggleClickArea = Utility.Create("TextButton", {
                    Name = "ClickArea",
                    Parent = toggleContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = ""
                })
                
                -- Store callback
                uiState.ToggleCallbacks[toggleId] = callback
                
                -- Handle toggle
                local function updateToggle()
                    -- Update UI
                    if isEnabled then
                        TweenService:Create(toggleButton, CONFIG.Tweens.Default, {
                            BackgroundColor3 = CONFIG.Elements.Toggle.ActiveColor
                        }):Play()
                        
                        TweenService:Create(toggleIndicator, CONFIG.Tweens.Default, {
                            Position = UDim2.new(1, -18, 0.5, -8)
                        }):Play()
                    else
                        TweenService:Create(toggleButton, CONFIG.Tweens.Default, {
                            BackgroundColor3 = CONFIG.Elements.Toggle.InactiveColor
                        }):Play()
                        
                        TweenService:Create(toggleIndicator, CONFIG.Tweens.Default, {
                            Position = UDim2.new(0, 2, 0.5, -8)
                        }):Play()
                    end
                    
                    -- Save setting
                    uiState.Settings[toggleId] = isEnabled
                    Utility.SaveSettings(uiState.Settings)
                    
                    -- Call callback
                    pcall(function()
                        if callback then
                            callback(isEnabled)
                        end
                    end)
                end
                
                -- Set initial state if needed
                if isEnabled and callback then
                    pcall(callback, isEnabled)
                end
                
                -- Handle click
                toggleClickArea.MouseButton1Click:Connect(function()
                    isEnabled = not isEnabled
                    updateToggle()
                end)
                
                -- Hover effects
                toggleClickArea.MouseEnter:Connect(function()
                    TweenService:Create(toggleContainer, CONFIG.Tweens.Fast, {
                        BackgroundColor3 = Color3.fromRGB(70, 70, 80)
                    }):Play()
                end)
                
                toggleClickArea.MouseLeave:Connect(function()
                    TweenService:Create(toggleContainer, CONFIG.Tweens.Fast, {
                        BackgroundColor3 = Color3.fromRGB(60, 60, 70)
                    }):Play()
                end)
                
                -- Return API with functions to control the toggle
                return {
                    Set = function(value)
                        isEnabled = value
                        updateToggle()
                    end,
                    Get = function()
                        return isEnabled
                    end,
                    Toggle = function()
                        isEnabled = not isEnabled
                        updateToggle()
                    end,
                    Instance = toggleContainer
                }
            end
            
            -- Create a slider
            function sectionAPI:AddSlider(text, min, max, default, step, callback, identifier)
                local sliderId = identifier or text
                
                -- Check if we have a saved setting
                local value = default
                if uiState.Settings[sliderId] ~= nil then
                    value = uiState.Settings[sliderId]
                end
                
                -- Ensure value is within bounds
                value = math.clamp(value, min, max)
                
                local sliderContainer = Utility.Create("Frame", {
                    Name = text.."Slider",
                    Parent = sectionContent,
                    BackgroundColor3 = CONFIG.Elements.Slider.BackgroundColor,
                    Size = UDim2.new(1, 0, 0, 60),
                    LayoutOrder = #sectionContent:GetChildren()
                })
                
                Utility.ApplyCorner(sliderContainer, UDim.new(0, 6))
                
                local sliderTitle = Utility.Create("TextLabel", {
                    Name = "Title",
                    Parent = sliderContainer,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 5),
                    Size = UDim2.new(1, -20, 0, 20),
                    Font = Enum.Font.GothamBold,
                    Text = text,
                    TextColor3 = CONFIG.Elements.Slider.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local valueLabel = Utility.Create("TextLabel", {
                    Name = "Value",
                    Parent = sliderContainer,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -50, 0, 5),
                    Size = UDim2.new(0, 40, 0, 20),
                    Font = Enum.Font.GothamBold,
                    Text = tostring(value),
                    TextColor3 = CONFIG.Elements.Slider.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local sliderTrack = Utility.Create("Frame", {
                    Name = "Track",
                    Parent = sliderContainer,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 50),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 10, 0, 35),
                    Size = UDim2.new(1, -20, 0, 4)
                })
                
                Utility.ApplyCorner(sliderTrack, UDim.new(1, 0))
                
                local sliderFill = Utility.Create("Frame", {
                    Name = "Fill",
                    Parent = sliderTrack,
                    BackgroundColor3 = CONFIG.Elements.Slider.SliderColor,
                    BorderSizePixel = 0,
                    Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                })
                
                Utility.ApplyCorner(sliderFill, UDim.new(1, 0))
                
                local sliderKnob = Utility.Create("Frame", {
                    Name = "Knob",
                    Parent = sliderTrack,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    Position = UDim2.new((value - min) / (max - min), -6, 0.5, -6),
                    Size = UDim2.new(0, 12, 0, 12),
                    ZIndex = 2
                })
                
                Utility.ApplyCorner(sliderKnob, UDim.new(1, 0))
                
                local sliderButton = Utility.Create("TextButton", {
                    Name = "SliderButton",
                    Parent = sliderContainer,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = "",
                    ZIndex = 3
                })
                
                -- Store callback
                uiState.SliderCallbacks[sliderId] = callback
                
                -- Handle slider functionality
                local isDragging = false
                
                local function updateSlider(input)
                    local mousePos = input.Position.X
                    local sliderPos = sliderTrack.AbsolutePosition.X
                    local sliderWidth = sliderTrack.AbsoluteSize.X
                    
                    local fraction = math.clamp((mousePos - sliderPos) / sliderWidth, 0, 1)
                    
                    -- Calculate value with step
                    local rawValue = min + (fraction * (max - min))
                    local steppedValue
                    
                    if step > 0 then
                        steppedValue = math.floor(rawValue / step + 0.5) * step
                        steppedValue = math.clamp(steppedValue, min, max)
                        fraction = (steppedValue - min) / (max - min)
                    else
                        steppedValue = rawValue
                    end
                    
                    -- Round to avoid floating point issues
                    steppedValue = math.floor(steppedValue * 1000 + 0.5) / 1000
                    
                    -- Update UI
                    sliderFill.Size = UDim2.new(fraction, 0, 1, 0)
                    sliderKnob.Position = UDim2.new(fraction, -6, 0.5, -6)
                    valueLabel.Text = tostring(steppedValue)
                    
                    -- Save setting and update value
                    value = steppedValue
                    uiState.Settings[sliderId] = value
                    Utility.SaveSettings(uiState.Settings)
                    
                    -- Call callback
                    pcall(function()
                        if callback then
                            callback(value)
                        end
                    end)
                end
                
                sliderButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
                       input.UserInputType == Enum.UserInputType.Touch then
                        isDragging = true
                        updateSlider(input)
                    end
                end)
                
                sliderButton.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or
                       input.UserInputType == Enum.UserInputType.Touch then
                        isDragging = false
                    end
                end)
                
                sliderButton.InputChanged:Connect(function(input)
                    if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                                      input.UserInputType == Enum.UserInputType.Touch) then
                        updateSlider(input)
                    end
                end)
                
                -- Set initial value if needed
                if callback then
                    pcall(callback, value)
                end
                
                -- Return API with functions to control the slider
                return {
                    Set = function(newValue)
                        value = math.clamp(newValue, min, max)
                        local fraction = (value - min) / (max - min)
                        
                        sliderFill.Size = UDim2.new(fraction, 0, 1, 0)
                        sliderKnob.Position = UDim2.new(fraction, -6, 0.5, -6)
                        valueLabel.Text = tostring(value)
                        
                        -- Save setting
                        uiState.Settings[sliderId] = value
                        Utility.SaveSettings(uiState.Settings)
                        
                        -- Call callback
                        pcall(function()
                            if callback then
                                callback(value)
                            end
                        end)
                    end,
                    Get = function()
                        return value
                    end,
                    Instance = sliderContainer
                }
            end
            
            -- Create a dropdown
            function sectionAPI:AddDropdown(text, options, default, callback, identifier)
                local dropdownId = identifier or text
                
                -- Check if we have a saved setting
                local selectedOption = default
                if uiState.Settings[dropdownId] ~= nil then
                    selectedOption = uiState.Settings[dropdownId]
                end
                
                local dropdownContainer = Utility.Create("Frame", {
                    Name = text.."Dropdown",
                    Parent = sectionContent,
                    BackgroundColor3 = CONFIG.Elements.Dropdown.HeaderColor,
                    Size = UDim2.new(1, 0, 0, 40),
                    ClipsDescendants = true,
                    LayoutOrder = #sectionContent:GetChildren()
                })
                
                Utility.ApplyCorner(dropdownContainer, UDim.new(0, 6))
                
                local dropdownHeader = Utility.Create("Frame", {
                    Name = "Header",
                    Parent = dropdownContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 40)
                })
                
                local dropdownTitle = Utility.Create("TextLabel", {
                    Name = "Title",
                    Parent = dropdownHeader,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -50, 1, 0),
                    Font = Enum.Font.GothamBold,
                    Text = text,
                    TextColor3 = CONFIG.Elements.Dropdown.TextColor,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local selectedText = Utility.Create("TextLabel", {
                    Name = "Selected",
                    Parent = dropdownHeader,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 0),
                    Size = UDim2.new(1, -50, 1, 0),
                    Font = Enum.Font.GothamBold,
                    Text = selectedOption or "Select...",
                    TextColor3 = Color3.fromRGB(200, 200, 200),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Right
                })
                
                local arrowIcon = Utility.Create("TextLabel", {
                    Name = "Arrow",
                    Parent = dropdownHeader,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -30, 0, 0),
                    Size = UDim2.new(0, 20, 1, 0),
                    Font = Enum.Font.GothamBold,
                    Text = "â–¼",
                    TextColor3 = CONFIG.Elements.Dropdown.TextColor,
                    TextSize = 12
                })
                
                local dropdownButton = Utility.Create("TextButton", {
                    Name = "Button",
                    Parent = dropdownHeader,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Text = ""
                })
                
                local optionsContainer = Utility.Create("Frame", {
                    Name = "OptionsContainer",
                    Parent = dropdownContainer,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 0, 0, 40),
                    Size = UDim2.new(1, 0, 0, 0),
                    ClipsDescendants = true
                })
                
                local optionsList = Utility.Create("ScrollingFrame", {
                    Name = "OptionsList",
                    Parent = optionsContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    ScrollBarThickness = 4,
                    ScrollingDirection = Enum.ScrollingDirection.Y,
                    ScrollBarImageColor3 = Color3.fromRGB(200, 200, 200),
                    BorderSizePixel = 0
                })
                
                local optionsLayout = Utility.Create("UIListLayout", {
                    Parent = optionsList,
                    SortOrder = Enum.SortOrder.LayoutOrder,
                    Padding = UDim.new(0, 2)
                })
                
                local optionsPadding = Utility.Create("UIPadding", {
                    Parent = optionsList,
                    PaddingLeft = UDim.new(0, 5),
                    PaddingRight = UDim.new(0, 5),
                    PaddingTop = UDim.new(0, 5),
                    PaddingBottom = UDim.new(0, 5)
                })
                
                -- Keep track of state
                local isExpanded = false
                local optionsHeight = 0
                
                -- Add options to the dropdown
                for i, option in ipairs(options) do
                    local optionButton = Utility.Create("TextButton", {
                        Name = option.."Option",
                        Parent = optionsList,
                        BackgroundColor3 = CONFIG.Elements.Dropdown.OptionColor,
                        Size = UDim2.new(1, 0, 0, 30),
                        Font = Enum.Font.GothamBold,
                        Text = option,
                        TextColor3 = CONFIG.Elements.Dropdown.TextColor,
                        TextSize = 14,
                        LayoutOrder = i
                    })
                    
                    Utility.ApplyCorner(optionButton, UDim.new(0, 4))
                    
                    -- Highlight if selected
                    if option == selectedOption then
                        optionButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                    end
                    
                    -- Click handler
                    optionButton.MouseButton1Click:Connect(function()
                        selectedOption = option
                        selectedText.Text = option
                        
                        -- Update options appearance
                        for _, child in pairs(optionsList:GetChildren()) do
                            if child:IsA("TextButton") then
                                child.BackgroundColor3 = CONFIG.Elements.Dropdown.OptionColor
                            end
                        end
                        
                        optionButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                        
                        -- Close dropdown
                        toggleDropdown()
                        
                        -- Save setting
                        uiState.Settings[dropdownId] = selectedOption
                        Utility.SaveSettings(uiState.Settings)
                        
                        -- Call callback
                        pcall(function()
                            if callback then
                                callback(selectedOption)
                            end
                        end)
                    end)
                    
                    -- Hover effects
                    optionButton.MouseEnter:Connect(function()
                        if optionButton.BackgroundColor3 ~= Color3.fromRGB(65, 105, 225) then
                            TweenService:Create(optionButton, CONFIG.Tweens.Fast, {
                                BackgroundColor3 = CONFIG.Elements.Dropdown.HoverColor
                            }):Play()
                        end
                    end)
                    
                    optionButton.MouseLeave:Connect(function()
                        if optionButton.BackgroundColor3 ~= Color3.fromRGB(65, 105, 225) then
                            TweenService:Create(optionButton, CONFIG.Tweens.Fast, {
                                BackgroundColor3 = CONFIG.Elements.Dropdown.OptionColor
                            }):Play()
                        end
                    end)
                    
                    optionsHeight = optionsHeight + optionButton.Size.Y.Offset + optionsLayout.Padding.Offset
                end
                
                -- Update canvas size based on options
                optionsList.CanvasSize = UDim2.new(0, 0, 0, optionsHeight)
                
                -- Limit dropdown height
                local maxDropdownHeight = math.min(200, optionsHeight + 10)
                
                -- Toggle dropdown function
                function toggleDropdown()
                    isExpanded = not isExpanded
                    
                    if isExpanded then
                        -- Expand
                        TweenService:Create(arrowIcon, CONFIG.Tweens.Default, {
                            Rotation = 180
                        }):Play()
                        
                        TweenService:Create(dropdownContainer, CONFIG.Tweens.Default, {
                            Size = UDim2.new(1, 0, 0, 40 + maxDropdownHeight)
                        }):Play()
                        
                        TweenService:Create(optionsContainer, CONFIG.Tweens.Default, {
                            Size = UDim2.new(1, 0, 0, maxDropdownHeight)
                        }):Play()
                    else
                        -- Collapse
                        TweenService:Create(arrowIcon, CONFIG.Tweens.Default, {
                            Rotation = 0
                        }):Play()
                        
                        TweenService:Create(dropdownContainer, CONFIG.Tweens.Default, {
                            Size = UDim2.new(1, 0, 0, 40)
                        }):Play()
                        
                        TweenService:Create(optionsContainer, CONFIG.Tweens.Default, {
                            Size = UDim2.new(1, 0, 0, 0)
                        }):Play()
                    end
                end
                
                -- Dropdown button click handler
                dropdownButton.MouseButton1Click:Connect(toggleDropdown)
                
                -- Set initial value if needed
                if selectedOption and callback then
                    pcall(callback, selectedOption)
                end
                
                -- Return API with functions to control the dropdown
                return {
                    Set = function(option)
                        -- Verify option exists
                        local optionExists = false
                        for _, opt in ipairs(options) do
                            if opt == option then
                                optionExists = true
                                break
                            end
                        end
                        
                        if not optionExists then
                            return
                        end
                        
                        selectedOption = option
                        selectedText.Text = option
                        
                        -- Update options appearance
                        for _, child in pairs(optionsList:GetChildren()) do
                            if child:IsA("TextButton") and child.Text == option then
                                child.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                            elseif child:IsA("TextButton") then
                                child.BackgroundColor3 = CONFIG.Elements.Dropdown.OptionColor
                            end
                        end
                        
                        -- Save setting
                        uiState.Settings[dropdownId] = selectedOption
                        Utility.SaveSettings(uiState.Settings)
                        
                        -- Call callback
                        pcall(function()
                            if callback then
                                callback(selectedOption)
                            end
                        end)
                    end,
                    Get = function()
                        return selectedOption
                    end,
                    Refresh = function(newOptions, keepSelection)
                        -- Clear existing options
                        for _, child in pairs(optionsList:GetChildren()) do
                            if child:IsA("TextButton") then
                                child:Destroy()
                            end
                        end
                        
                        -- Reset height
                        optionsHeight = 0
                        
                        -- Check if we need to reset selection
                        local selectionExists = false
                        if keepSelection then
                            for _, opt in ipairs(newOptions) do
                                if opt == selectedOption then
                                    selectionExists = true
                                    break
                                end
                            end
                        end
                        
                        if not selectionExists then
                            selectedOption = nil
                            selectedText.Text = "Select..."
                        end
                        
                        -- Add new options
                        for i, option in ipairs(newOptions) do
                            local optionButton = Utility.Create("TextButton", {
                                Name = option.."Option",
                                Parent = optionsList,
                                BackgroundColor3 = CONFIG.Elements.Dropdown.OptionColor,
                                Size = UDim2.new(1, 0, 0, 30),
                                Font = Enum.Font.GothamBold,
                                Text = option,
                                TextColor3 = CONFIG.Elements.Dropdown.TextColor,
                                TextSize = 14,
                                LayoutOrder = i
                            })
                            
                            Utility.ApplyCorner(optionButton, UDim.new(0, 4))
                            
                            -- Highlight if selected
                            if option == selectedOption then
                                optionButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                            end
                            
                            -- Click handler (same as above)
                            optionButton.MouseButton1Click:Connect(function()
                                selectedOption = option
                                selectedText.Text = option
                                
                                for _, child in pairs(optionsList:GetChildren()) do
                                    if child:IsA("TextButton") then
                                        child.BackgroundColor3 = CONFIG.Elements.Dropdown.OptionColor
                                    end
                                end
                                
                                optionButton.BackgroundColor3 = Color3.fromRGB(65, 105, 225)
                                toggleDropdown()
                                
                                uiState.Settings[dropdownId] = selectedOption
                                Utility.SaveSettings(uiState.Settings)
                                
                                pcall(function()
                                    if callback then
                                        callback(selectedOption)
                                    end
                                end)
                            end)
                            
                            -- Hover effects (same as above)
                            optionButton.MouseEnter:Connect(function()
                                if optionButton.BackgroundColor3 ~= Color3.fromRGB(65, 105, 225) then
                                    TweenService:Create(optionButton, CONFIG.Tweens.Fast, {
                                        BackgroundColor3 = CONFIG.Elements.Dropdown.HoverColor
                                    }):Play()
                                end
                            end)
                            
                            optionButton.MouseLeave:Connect(function()
                                if optionButton.BackgroundColor3 ~= Color3.fromRGB(65, 105, 225) then
                                    TweenService:Create(optionButton, CONFIG.Tweens.Fast, {
                                        BackgroundColor3 = CONFIG.Elements.Dropdown.OptionColor
                                    }):Play()
                                end
                            end)
                            
                            optionsHeight = optionsHeight + optionButton.Size.Y.Offset + optionsLayout.Padding.Offset
                        end
                        
                        -- Update canvas size
                        optionsList.CanvasSize = UDim2.new(0, 0, 0, optionsHeight)
                        
                        -- Update max height
                        maxDropdownHeight = math.min(200, optionsHeight + 10)
                        
                        -- If expanded, adjust size
                        if isExpanded then
                            dropdownContainer.Size = UDim2.new(1, 0, 0, 40 + maxDropdownHeight)
                            optionsContainer.Size = UDim2.new(1, 0, 0, maxDropdownHeight)
                        end
                    end,
                    Instance = dropdownContainer
                }
            end
            
            -- Create a label
            function sectionAPI:AddLabel(text)
                local label = Utility.Create("TextLabel", {
                    Name = "Label",
                    Parent = sectionContent,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 50),
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = Enum.Font.GothamBold,
                    Text = text,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    LayoutOrder = #sectionContent:GetChildren()
                })
                
                Utility.ApplyCorner(label, UDim.new(0, 6))
                
                return {
                    Set = function(newText)
                        label.Text = newText
                    end,
                    Instance = label
                }
            end
            
            -- Create a text input
            function sectionAPI:AddTextbox(text, placeholder, default, callback, identifier)
                local textboxId = identifier or text
                
                -- Check if we have a saved setting
                local value = default or ""
                if uiState.Settings[textboxId] ~= nil then
                    value = uiState.Settings[textboxId]
                end
                
                local textboxContainer = Utility.Create("Frame", {
                    Name = text.."Textbox",
                    Parent = sectionContent,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 50),
                    Size = UDim2.new(1, 0, 0, 60),
                    LayoutOrder = #sectionContent:GetChildren()
                })
                
                Utility.ApplyCorner(textboxContainer, UDim.new(0, 6))
                
                local textboxLabel = Utility.Create("TextLabel", {
                    Name = "Label",
                    Parent = textboxContainer,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 5),
                    Size = UDim2.new(1, -20, 0, 20),
                    Font = Enum.Font.GothamBold,
                    Text = text,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local textboxInput = Utility.Create("TextBox", {
                    Name = "Input",
                    Parent = textboxContainer,
                    BackgroundColor3 = Color3.fromRGB(30, 30, 40),
                    Position = UDim2.new(0, 10, 0, 30),
                    Size = UDim2.new(1, -20, 0, 25),
                    Font = Enum.Font.GothamMedium,
                    PlaceholderText = placeholder or "Enter text...",
                    Text = value,
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    ClearTextOnFocus = false
                })
                
                Utility.ApplyCorner(textboxInput, UDim.new(0, 4))
                
                local textPadding = Utility.Create("UIPadding", {
                    Parent = textboxInput,
                    PaddingLeft = UDim.new(0, 8)
                })
                
                -- Handle text input
                textboxInput.FocusLost:Connect(function(enterPressed)
                    value = textboxInput.Text
                    
                    -- Save setting
                    uiState.Settings[textboxId] = value
                    Utility.SaveSettings(uiState.Settings)
                    
                    -- Call callback
                    pcall(function()
                        if callback then
                            callback(value, enterPressed)
                        end
                    end)
                end)
                
                -- Set initial value if needed
                if value ~= "" and callback then
                    pcall(callback, value, false)
                end
                
                -- Return API with functions to control the textbox
                return {
                    Set = function(newValue)
                        value = newValue
                        textboxInput.Text = value
                        
                        -- Save setting
                        uiState.Settings[textboxId] = value
                        Utility.SaveSettings(uiState.Settings)
                        
                        -- Call callback
                        pcall(function()
                            if callback then
                                callback(value, false)
                            end
                        end)
                    end,
                    Get = function()
                        return value
                    end,
                    Instance = textboxContainer
                }
            end
            
            -- Create a divider
            function sectionAPI:AddDivider()
                local divider = Utility.Create("Frame", {
                    Name = "Divider",
                    Parent = sectionContent,
                    BackgroundColor3 = Color3.fromRGB(60, 60, 70),
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 1),
                    LayoutOrder = #sectionContent:GetChildren()
                })
                
                return divider
            end
            
            -- Add padding
            function sectionAPI:AddSpacer(size)
                local spacer = Utility.Create("Frame", {
                    Name = "Spacer",
                    Parent = sectionContent,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, size or 10),
                    LayoutOrder = #sectionContent:GetChildren()
                })
                
                return spacer
            end
            
            return sectionAPI
        end
        
        return tabAPI
    end
    
    -- Apply fade-in animations
    local function applyFadeInAnimations()
        local elements = {
            {obj = mainFrame, prop = "BackgroundTransparency", delay = 0.1},
            {obj = topBar, prop = "BackgroundTransparency", delay = 0.2},
            {obj = titleLabel, prop = "TextTransparency", delay = 0.3},
            {obj = closeButton, prop = "BackgroundTransparency", delay = 0.4},
            {obj = closeButton, prop = "TextTransparency", delay = 0.4},
            {obj = minimizeButton, prop = "BackgroundTransparency", delay = 0.4},
            {obj = minimizeButton, prop = "TextTransparency", delay = 0.4},
            {obj = sidebar, prop = "BackgroundTransparency", delay = 0.5},
            {obj = contentFrame, prop = "BackgroundTransparency", delay = 0.5}
        }
        
        -- Prepare for animation (set all to transparent)
        for _, element in ipairs(elements) do
            element.obj[element.prop] = 1
        end
        
        -- Play animations
        for _, element in ipairs(elements) do
            spawn(function()
                wait(element.delay)
                TweenService:Create(element.obj, CONFIG.Tweens.Default, {
                    [element.prop] = 0
                }):Play()
            end)
        end
    end
    
    -- Add API functions for global operations
    function libraryAPI:SetTheme(theme)
        -- Apply theme colors to UI elements
        if theme.TopBar then
            TweenService:Create(topBar, CONFIG.Tweens.Default, {
                BackgroundColor3 = theme.TopBar
            }):Play()
        end
        
        if theme.Sidebar then
            TweenService:Create(sidebar, CONFIG.Tweens.Default, {
                BackgroundColor3 = theme.Sidebar
            }):Play()
        end
        
        if theme.Content then
            TweenService:Create(contentFrame, CONFIG.Tweens.Default, {
                BackgroundColor3 = theme.Content
            }):Play()
        end
        
        if theme.Button then
            CONFIG.Elements.Button.Color = theme.Button
            CONFIG.Elements.Button.HoverColor = theme.ButtonHover or theme.Button:Lerp(Color3.fromRGB(255, 255, 255), 0.2)
            CONFIG.Elements.Button.PressColor = theme.ButtonPress or theme.Button:Lerp(Color3.fromRGB(0, 0, 0), 0.2)
        end
        
        if theme.Toggle then
            CONFIG.Elements.Toggle.ActiveColor = theme.Toggle
        end
        
        if theme.Slider then
            CONFIG.Elements.Slider.SliderColor = theme.Slider
        end
    end
    
    function libraryAPI:Notify(title, message, duration)
        -- Create notification
        local notification = Utility.Create("Frame", {
            Name = "Notification",
            Parent = screenGui,
            BackgroundColor3 = Color3.fromRGB(40, 40, 50),
            Position = UDim2.new(1, 20, 0.5, 0),
            Size = UDim2.new(0, 250, 0, 100),
            AnchorPoint = Vector2.new(0, 0.5),
            ZIndex = 100
        })
        
        Utility.ApplyCorner(notification, UDim.new(0, 10))
        
        local notifTitle = Utility.Create("TextLabel", {
            Name = "Title",
            Parent = notification,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 10),
            Size = UDim2.new(1, -30, 0, 25),
            Font = Enum.Font.GothamBold,
            Text = title or "Notification",
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 101
        })
        
        local notifMessage = Utility.Create("TextLabel", {
            Name = "Message",
            Parent = notification,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 40),
            Size = UDim2.new(1, -30, 0, 50),
            Font = Enum.Font.GothamMedium,
            Text = message or "",
            TextColor3 = Color3.fromRGB(220, 220, 220),
            TextSize = 14,
            TextWrapped = true,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 101
        })
        
        -- Animation
        TweenService:Create(notification, CONFIG.Tweens.Default, {
            Position = UDim2.new(1, -270, 0.5, 0)
        }):Play()
        
        -- Auto close
        spawn(function()
            wait(duration or 3)
            
            TweenService:Create(notification, CONFIG.Tweens.Default, {
                Position = UDim2.new(1, 20, 0.5, 0)
            }):Play()
            
            wait(0.5)
            notification:Destroy()
        end)
        
        return notification
    end
    
    function libraryAPI:UpdateToggle(identifier, value)
        if uiState.ToggleCallbacks[identifier] then
            uiState.Settings[identifier] = value
            Utility.SaveSettings(uiState.Settings)
            
            pcall(function()
                uiState.ToggleCallbacks[identifier](value)
            end)
        end
    end
    
    function libraryAPI:UpdateSlider(identifier, value)
        if uiState.SliderCallbacks[identifier] then
            uiState.Settings[identifier] = value
            Utility.SaveSettings(uiState.Settings)
            
            pcall(function()
                uiState.SliderCallbacks[identifier](value)
            end)
        end
    end
    
    function libraryAPI:GetSetting(identifier)
        return uiState.Settings[identifier]
    end
    
    function libraryAPI:SaveSettings()
        Utility.SaveSettings(uiState.Settings)
    end
    
    function libraryAPI:Show()
        screenGui.Enabled = true
    end
    
    function libraryAPI:Hide()
        screenGui.Enabled = false
    end
    
    function libraryAPI:Toggle()
        screenGui.Enabled = not screenGui.Enabled
    end
    
    -- Apply animations
    applyFadeInAnimations()
    
    return libraryAPI
end

-- Return the library
return CaelusUILibrary
